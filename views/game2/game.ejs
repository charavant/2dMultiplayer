<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Game 2 – Under Construction</title>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    :root {
      --blue-team:#00b3ff;
      --red-team:#ff273d;
      --neutral:#ffffff;
      --bg-dark:#0a0d13;
      --bg-mid:#142134;
    }
    *{margin:0;padding:0;box-sizing:border-box;}
    html,body{height:100%;width:100%;overflow:hidden;font-family:'Orbitron',sans-serif;color:var(--neutral);}
    body{background:radial-gradient(ellipse at bottom,var(--bg-mid) 0%,var(--bg-dark) 100%);}
    body::before{content:"";position:fixed;inset:0;width:300%;height:300%;background:url("https://raw.githubusercontent.com/Kieran-Brown/assets/main/stars_2.png") repeat;animation:starShift 140s linear infinite;pointer-events:none;}
    @keyframes starShift{from{transform:translateY(0);}to{transform:translateY(-50%);}}
    .teamPopup{background:rgba(0,0,0,.78);backdrop-filter:blur(4px);border-radius:10px;padding:1rem;min-width:200px;}
    .game-container{display:flex;justify-content:center;gap:2rem;align-items:flex-start;padding-top:2rem;}
    .playerName{cursor:move;}
    .removeBtn{cursor:pointer;color:var(--red-team);}
    .behaviorSelect{width:7rem;}
  </style>
</head>
<body>
  <h1 class="text-center mt-3">Game 2 – Under Construction</h1>
  <div class="d-flex flex-column align-items-center mt-4">
    <canvas id="qrCode"></canvas>
    <p class="mt-2">Scan to join: <%= joinURL %></p>
  </div>
  <div class="game-container">
    <div id="blueTeamPopup" class="teamPopup">
      <h4>Blue Team</h4>
      <ul id="playersLeft" class="list-unstyled"></ul>
      <button id="addBotLeft" class="btn btn-sm btn-light mt-2">Add Bot</button>
    </div>
    <div id="redTeamPopup" class="teamPopup">
      <h4>Red Team</h4>
      <ul id="playersRight" class="list-unstyled"></ul>
      <button id="addBotRight" class="btn btn-sm btn-light mt-2">Add Bot</button>
    </div>
  </div>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.1/build/qrcode.min.js"></script>
  <script>
    const socket = io();
    const joinURL = "<%= joinURL %>";
    const botBehaviorNames = [];
    QRCode.toCanvas(document.getElementById('qrCode'), joinURL);
    const leftList = document.getElementById('playersLeft');
    const rightList = document.getElementById('playersRight');
    [leftList, rightList].forEach(el => el.addEventListener('dragover', e => e.preventDefault()));
    function handleDrop(team){
      return e => { e.preventDefault(); const id = e.dataTransfer.getData('playerId'); if(id) socket.emit('setTeam', { playerId:id, team }); };
    }
    leftList.addEventListener('drop', handleDrop('left'));
    rightList.addEventListener('drop', handleDrop('right'));
    document.getElementById('addBotLeft').addEventListener('click', () => socket.emit('addBot', 'left'));
    document.getElementById('addBotRight').addEventListener('click', () => socket.emit('addBot', 'right'));
    function updateTeamLists(data){
      leftList.innerHTML='';
      rightList.innerHTML='';
      let leftCount=0,rightCount=0;
      Object.values(data.players).forEach(p=>{
        const li=document.createElement('li');
        li.dataset.playerId=p.id;
        const name=document.createElement('span');
        name.className='playerName';
        name.textContent=p.name||'Unnamed';
        name.draggable=true;
        name.addEventListener('dragstart',e=>{e.dataTransfer.setData('playerId',p.id);});
        li.appendChild(name);
        if(p.isBot){
          const sel=document.createElement('select');
          sel.className='form-select form-select-sm behaviorSelect';
          botBehaviorNames.forEach(b=>{const opt=document.createElement('option');opt.value=b;opt.textContent=b;if(p.behavior===b)opt.selected=true;sel.appendChild(opt);});
          sel.addEventListener('change',()=>{socket.emit('setBotBehavior',{botId:p.id,behavior:sel.value});});
          li.appendChild(sel);
        }
        const remove=document.createElement('span');
        remove.textContent='❌';
        remove.className='removeBtn';
        remove.draggable=false;
        remove.addEventListener('click',ev=>{ev.preventDefault();ev.stopPropagation();socket.emit('removePlayer',li.dataset.playerId);li.remove();});
        li.appendChild(remove);
        if(p.team==='left'){leftList.appendChild(li);leftCount++;}else{rightList.appendChild(li);rightCount++;}
      });
      document.querySelector('#blueTeamPopup h4').textContent=`Blue Team (${leftCount})`;
      document.querySelector('#redTeamPopup h4').textContent=`Red Team (${rightCount})`;
    }
    socket.on('gameState', updateTeamLists);
  </script>
</body>
</html>
