<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Space Battle Pong - Mobile Controller</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Optionally include Bootstrap Icons for the stat icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      width: 100%;
      overflow: hidden;
      background-color: #333;
      color: #fff;
      font-family: Arial, sans-serif;
    }
    /* Pre-game: Name entry screen */
    #nameEntry {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100%;
      background: #222;
    }
    #nameEntry input {
      max-width: 300px;
      margin-bottom: 10px;
    }
    /* Controller UI (hidden until name is entered) */
    #controllerUI {
      display: none;
      height: 100%;
      width: 100%;
    }
    .controller-container {
      display: flex;
      flex-direction: row;
      height: 100%;
      width: 100%;
    }
    .left-panel {
      flex: 1;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .right-panel {
      width: 300px;
      background-color: #222;
      display: flex;
      flex-direction: column;
      padding: 10px;
    }
    table.stats-table th, table.stats-table td {
      padding: 2px 4px;
      font-size: 14px;
      border-bottom: 1px solid #555;
      vertical-align: middle;
    }
    table.stats-table th {
      width: auto;
      text-align: left;
      white-space: nowrap;
    }
    table.stats-table i {
      font-size: 1.1em;
    }
    /* Upgrade buttons grid - removed old buttons */
    .stat-upgrade {
      padding: 3px 6px;
      font-size: 18px;
    }
    /* Joystick styling */
    #joystickContainer {
      position: relative;
      width: 250px;
      height: 250px;
      border: 4px solid #555;
      border-radius: 50%;
      background: radial-gradient(circle at center, #555 0%, #333 100%);
      box-shadow: 0 0 10px rgba(0,0,0,0.5) inset;
      touch-action: none;
      transition: border-color 0.3s, background-color 0.3s;
    }
    #knob {
      position: absolute;
      width: 60px;
      height: 60px;
      background-color: #ff0;
      border: 3px solid #fff;
      border-radius: 50%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      transition: left 0.1s, top 0.1s;
    }

    /* Overlay shown when device is in portrait */
    #orientationOverlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.8);
      display: none;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      color: #fff;
      text-align: center;
    }

    #deadOverlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.8);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      color: #fff;
      font-size: 32px;
    }

    /* Responsive adjustments for portrait */
    @media (orientation: portrait) {
      .controller-container {
        flex-direction: column;
      }
      .right-panel {
        width: 100%;
        height: 200px;
      }
      .left-panel {
        flex: 1;
      }
    }
  </style>
</head>
<body>
  <div id="orientationOverlay">
    <div style="font-size:48px;">üîÑ</div>
    <p>This game is played in Landscape</p>
  </div>
  <div id="deadOverlay">Wait for next round...</div>
  <!-- Pre-game Name Entry Screen -->
  <div id="nameEntry">
    <input type="text" id="playerName" class="form-control" placeholder="Enter your name">
    <button id="submitName" class="btn btn-primary">Join Game</button>
  </div>
  
  <!-- Controller UI (shown after name is submitted) -->
  <div id="controllerUI">
    <div class="controller-container">
      <div class="left-panel">
        <div id="joystickContainer">
          <div id="knob"></div>
        </div>
      </div>
      <div class="right-panel">
        <button id="leaderboardButton" class="btn btn-secondary mb-2"><i class="bi bi-list"></i></button>
        <table class="table table-dark table-sm stats-table text-center mb-2">
          <tr><th><i class="bi bi-trophy-fill"></i> Level</th><td id="stat-level">0</td><td></td></tr>
          <tr><th><i class="bi bi-star-fill"></i> EXP</th><td id="stat-exp">0</td><td></td></tr>
          <tr><th><i class="bi bi-heart-fill"></i> Lives</th><td id="stat-lives">0</td><td><button class="btn btn-sm btn-success stat-upgrade" data-upgrade="health">‚¨ÜÔ∏è</button></td></tr>
          <tr><th><i class="bi bi-lightning-fill"></i> Damage</th><td id="stat-damage">0</td><td><button class="btn btn-sm btn-success stat-upgrade" data-upgrade="moreDamage">‚¨ÜÔ∏è</button></td></tr>
          <tr><th><i class="bi bi-speedometer"></i> Speed</th><td id="stat-speed">0</td><td><button class="btn btn-sm btn-success stat-upgrade" data-upgrade="bulletSpeed">‚¨ÜÔ∏è</button></td></tr>
          <tr><th><i class="bi bi-three-dots"></i> Extra Shots</th><td id="stat-moreBullets">0</td><td><button class="btn btn-sm btn-success stat-upgrade" data-upgrade="moreBullets">‚¨ÜÔ∏è</button></td></tr>
          <tr><th><i class="bi bi-slash"></i> Diagonal</th><td id="stat-diagonal">0</td><td><button class="btn btn-sm btn-success stat-upgrade" data-upgrade="diagonalBullets">‚¨ÜÔ∏è</button></td></tr>
          <tr><th><i class="bi bi-shield-fill"></i> Shield</th><td id="stat-shield">0</td><td><button class="btn btn-sm btn-success stat-upgrade" data-upgrade="shield">‚¨ÜÔ∏è</button></td></tr>
          <tr><th><i class="bi bi-gear-fill"></i> Upgrades</th><td id="stat-up">0</td><td></td></tr>
        </table>
      </div>
    </div>
  </div>
  <div id="leaderboardPopup" style="display:none; position:fixed; top:0; left:0; right:0; bottom:0; background:rgba(0,0,0,0.8); z-index:1000; color:#fff; overflow-y:auto; padding:10px;">
    <h4 class="text-center">Leaderboard</h4>
    <div class="d-flex justify-content-around">
      <div>
        <h5>Blue Team</h5>
        <table class="table table-dark table-sm" id="lbBlue"></table>
      </div>
      <div>
        <h5>Red Team</h5>
        <table class="table table-dark table-sm" id="lbRed"></table>
      </div>
    </div>
    <div class="text-center"><button id="closeLeaderboard" class="btn btn-secondary">Close</button></div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    let myPlayer = null;

    function checkOrientation() {
      const overlay = document.getElementById('orientationOverlay');
      if (window.matchMedia('(orientation: portrait)').matches) {
        overlay.style.display = 'flex';
      } else {
        overlay.style.display = 'none';
      }
    }

    window.addEventListener('orientationchange', checkOrientation);
    window.addEventListener('resize', checkOrientation);
    window.addEventListener('load', () => {
      checkOrientation();
      if (screen.orientation && screen.orientation.lock) {
        screen.orientation.lock('landscape').catch(() => {});
      }
    });
    
    // Handle pre-game name submission
    document.getElementById('submitName').addEventListener('click', () => {
      const name = document.getElementById('playerName').value.trim();
      if (name) {
        socket.emit('joinWithName', name);
        document.getElementById('nameEntry').style.display = 'none';
        document.getElementById('controllerUI').style.display = 'block';
        if (screen.orientation && screen.orientation.lock) {
          screen.orientation.lock('landscape').catch(() => {});
        }
        checkOrientation();
      }
    });
    
    const upgradeOptions = {
      moreDamage: { label: "Damage", max: 5 },
      diagonalBullets: { label: "Diagonal", max: 3 },
      shield: { label: "Shield", max: 5 },
      moreBullets: { label: "More Bullets", max: 5 },
      bulletSpeed: { label: "Bullet Speed", max: 5 },
      health: { label: "Health", max: 5 }
    };
    
    socket.on('playerInfo', (p) => {
      myPlayer = p;
      updateStats();
      updateJoystickColor();
      updateUpgradeButtons();
      updateBackground();
    });
    
    socket.on('gameState', (data) => {
      if (data.players[socket.id]) {
        myPlayer = data.players[socket.id];
        updateStats();
        updateUpgradeButtons();
        if (data.mode === 'tdm') {
          document.getElementById('deadOverlay').style.display = myPlayer.isAlive ? 'none' : 'flex';
        } else {
          document.getElementById('deadOverlay').style.display = 'none';
        }
      }
      latestPlayers = data.players;
      if (document.getElementById('leaderboardPopup').style.display === 'block') {
        updateLeaderboard(latestPlayers);
      }
    });

    socket.on('levelUp', () => {
      if (navigator.vibrate) {
        navigator.vibrate([200, 100, 200]);
      }
    });
    
    function updateStats() {
      if (!myPlayer) return;
      document.getElementById('stat-level').innerText = myPlayer.level;
      document.getElementById('stat-exp').innerText = myPlayer.exp.toFixed(1);
      document.getElementById('stat-lives').innerText = Math.round(myPlayer.lives);
      document.getElementById('stat-damage').innerText = myPlayer.bulletDamage;
      document.getElementById('stat-speed').innerText = myPlayer.bulletSpeed;
      document.getElementById('stat-moreBullets').innerText = myPlayer.upgrades?.moreBullets || 0;
      document.getElementById('stat-diagonal').innerText = myPlayer.upgrades?.diagonalBullets || 0;
      document.getElementById('stat-shield').innerText = myPlayer.shieldMax;
      document.getElementById('stat-up').innerText = myPlayer.upgradePoints;
      // update table visibility is handled by button disabling
    }
    
    function updateJoystickColor() {
      const container = document.getElementById('joystickContainer');
      if (myPlayer) {
        if (myPlayer.team === 'left') {
          container.style.borderColor = '#007BFF';
          container.style.backgroundColor = '#0056b3';
        } else {
          container.style.borderColor = '#FF4136';
          container.style.backgroundColor = '#d62d20';
        }
      }
    }
    
    function updateUpgradeButtons() {
      const buttons = document.querySelectorAll('.stat-upgrade');
      buttons.forEach(btn => {
        const key = btn.getAttribute('data-upgrade');
        const level = myPlayer.upgrades ? (myPlayer.upgrades[key] || 0) : 0;
        const max = upgradeOptions[key].max;
        btn.disabled = myPlayer.upgradePoints <= 0 || level >= max;
      });
    }

    document.querySelectorAll('.stat-upgrade').forEach(btn => {
      btn.addEventListener('click', () => {
        const option = btn.getAttribute('data-upgrade');
        socket.emit('upgrade', option);
      });
    });
    
    function updateBackground() {
      if (!myPlayer) return;
      let gradient;
      if (myPlayer.team === 'left') {
        gradient = 'linear-gradient(45deg, #0056b3, #007BFF)';
      } else {
        gradient = 'linear-gradient(45deg, #d62d20, #FF4136)';
      }
      document.body.style.background = gradient;
    }

    let latestPlayers = {};
    function updateLeaderboard(players) {
      latestPlayers = players;
      const blue = document.getElementById('lbBlue');
      const red = document.getElementById('lbRed');
      if (!blue || !red) return;
      blue.innerHTML = '<tr><th>Name</th><th>Lv</th><th>K</th><th>D</th><th>A</th></tr>';
      red.innerHTML = '<tr><th>Name</th><th>Lv</th><th>K</th><th>D</th><th>A</th></tr>';
      Object.values(players).forEach(p => {
        const row = `<tr><td>${p.name || 'Unnamed'}</td><td>${p.level}</td><td>${p.kills||0}</td><td>${p.deaths||0}</td><td>${p.assists||0}</td></tr>`;
        if (p.team === 'left') blue.innerHTML += row; else red.innerHTML += row;
      });
    }

    document.getElementById('leaderboardButton').addEventListener('click', () => {
      const popup = document.getElementById('leaderboardPopup');
      if (popup.style.display === 'block') {
        popup.style.display = 'none';
      } else {
        updateLeaderboard(latestPlayers);
        popup.style.display = 'block';
      }
    });
    document.getElementById('closeLeaderboard').addEventListener('click', () => {
      document.getElementById('leaderboardPopup').style.display = 'none';
    });
    
    // Virtual joystick handling
    const container = document.getElementById('joystickContainer');
    const knob = document.getElementById('knob');
    let centerX, centerY, maxRadius;
    function updateCenter() {
      centerX = container.offsetWidth / 2;
      centerY = container.offsetHeight / 2;
      maxRadius = centerX - knob.offsetWidth / 2;
      knob.style.left = centerX + 'px';
      knob.style.top = centerY + 'px';
    }
    updateCenter();
    window.addEventListener('resize', updateCenter);
    let dragging = false;
    
    function pointerDown(e) { dragging = true; moveKnob(e); }
    function pointerMove(e) { if (dragging) moveKnob(e); }
    function pointerUp() { dragging = false; knob.style.left = centerX + 'px'; knob.style.top = centerY + 'px'; }
    
    function moveKnob(e) {
      const rect = container.getBoundingClientRect();
      let cx, cy;
      if (e.touches) {
        cx = e.touches[0].clientX - rect.left;
        cy = e.touches[0].clientY - rect.top;
      } else {
        cx = e.clientX - rect.left;
        cy = e.clientY - rect.top;
      }
      let dx = cx - centerX;
      let dy = cy - centerY;
      let dist = Math.sqrt(dx * dx + dy * dy);
      if (dist > maxRadius) {
        dx = (dx / dist) * maxRadius;
        dy = (dy / dist) * maxRadius;
      }
      knob.style.left = (centerX + dx) + 'px';
      knob.style.top = (centerY + dy) + 'px';
      const angleDeg = Math.atan2(dy, dx) * (180 / Math.PI);
      socket.emit('updateAngle', angleDeg);
    }
    
    container.addEventListener('mousedown', pointerDown);
    container.addEventListener('mousemove', pointerMove);
    container.addEventListener('mouseup', pointerUp);
    container.addEventListener('mouseleave', pointerUp);
    container.addEventListener('touchstart', pointerDown, { passive: false });
    container.addEventListener('touchmove', pointerMove, { passive: false });
    container.addEventListener('touchend', pointerUp);
    container.addEventListener('touchcancel', pointerUp);

    socket.on('kicked', () => {
      alert('You have been removed from the game.');
      window.location.reload();
    });
  </script>
</body>
</html>
