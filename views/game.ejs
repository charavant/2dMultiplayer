<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Team Game - PC Screen</title>
  <style>
    * { margin:0; padding:0; box-sizing:border-box; }
    html, body { width:100%; height:100%; background:#000; color:#fff; font-family:sans-serif; }
    #gameCanvas { display:block; background:#000; }
    #qrModal {
      position:fixed; top:0; left:0; right:0; bottom:0;
      display:flex; flex-direction:column; align-items:center; justify-content:center;
      background:rgba(0,0,0,0.8); z-index:9999;
    }
    #qrContainer { background:#222; padding:20px; border-radius:8px; text-align:center; }
    .teamPopup {
      position: fixed;
      top: 50%;
      transform: translateY(-50%);
      width: 180px;
      padding: 10px;
      background: rgba(0,0,0,0.85);
      background: rgba(0,0,0,0.8);
      border-radius: 8px;
      color: #fff;
      max-height: 250px;
      overflow-y: auto;
      z-index: 10000;
      z-index: 9998;
      text-align: left;
    }
    #blueTeamPopup { left: 20px; border: 2px solid #007BFF; }
    #redTeamPopup { right: 20px; border: 2px solid #FF4136; }
    .teamPopup h4 { margin-bottom: 5px; font-size: 18px; }
    .teamPopup ul { list-style: none; padding: 0; margin: 0; }
    .teamPopup li { font-size: 16px; margin-bottom: 3px; }
    #playersList h4 {
      margin-bottom: 5px;
      font-size: 18px;
    }
    #playersList ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    #playersList li {
      font-size: 16px;
      margin-bottom: 3px;
    }
    #closeModal, #setGameTimeButton {
      color:#fff; background:#f00; border:none; font-size:18px;
      margin-top:10px; padding:8px 12px; border-radius:4px; cursor:pointer;
    }
    #gameTimeInput {
      font-size:16px; padding:5px; margin-top:10px;
      width:80px; text-align:center;
    }
    #overlay {
      position:absolute;
      top:0;
      left:0;
      width:100%;
      text-align:center;
      pointer-events:none;
      font-size:24px;
    }
    #timeBarContainer {
      position:relative;
      width:80%;
      height:20px;
      background:#444;
      border:1px solid #fff;
      margin:0 auto;
    }
    #timeBar {
      position:absolute;
      top:0;
      left:0;
      height:100%;
      width:0%;
      background:#0f0;
    }
    #timeText {
      position:absolute;
      width:100%;
      top:0;
      left:0;
      line-height:20px;
      font-size:16px;
    }
    #scoreContainer {
      margin-top:6px;
      display:flex;
      justify-content:center;
      gap:20px;
    }
    }
    #scoreContainer {
      margin-top:6px;
      display:flex;
      justify-content:center;
      gap:20px;
    }
    .scoreBox {
      padding:4px 10px;
      color:#fff;
      border-radius:4px;
      font-size:20px;
    }
    .scoreBlue { background:#007BFF; }
    .scoreRed { background:#FF4136; }
  </style>
</head>
<body>
  <div id="blueTeamPopup" class="teamPopup">
    <h4>Blue Team</h4>
    <ul id="playersLeft" class="list-unstyled"></ul>
  </div>
  <div id="redTeamPopup" class="teamPopup">
    <h4>Red Team</h4>
    <ul id="playersRight" class="list-unstyled"></ul>
  </div>
  <div id="qrModal">
    <div id="qrContainer">
      <h2>Scan to Join</h2>
      <canvas id="qrCode"></canvas>
      <!-- team popups are positioned outside -->
      <br>
      <label for="gameTimeInput">Game Time (minutes):</label>
      <input type="number" id="gameTimeInput" value="10" min="1" max="10">
      <br>
      <label for="maxLevelInput">Max Levels (<%= upgradeBreakdown %> = <%= totalUpgrades %>; cap <%= maxAllowedCap %>)</label>
      <input type="number" id="maxLevelInput" value="<%= defaultCap %>" min="1" max="<%= maxAllowedCap %>">
      <br>
      <button id="setMaxLevelButton">Set Max Levels</button>
      <br>
      <label for="gameTimeInput">Game Time (minutes):</label>
      <input type="number" id="gameTimeInput" value="10" min="1" max="10">
      <br>
      <label for="maxLevelInput">Max Levels (<%= upgradeBreakdown %> = <%= totalUpgrades %>; cap <%= maxAllowedCap %>)</label>
      <input type="number" id="maxLevelInput" value="<%= defaultCap %>" min="1" max="<%= maxAllowedCap %>">
      <br>
      <button id="setMaxLevelButton">Set Max Levels</button>
      <br>
      <label for="gameTimeInput">Game Time (minutes):</label>
      <input type="number" id="gameTimeInput" value="10" min="1" max="10">
      <br>
      <label for="maxLevelInput">Max Levels (<%= upgradeBreakdown %> = <%= totalUpgrades %>; cap <%= maxAllowedCap %>)</label>
      <input type="number" id="maxLevelInput" value="<%= defaultCap %>" min="1" max="<%= maxAllowedCap %>">
      <br>
      <button id="setMaxLevelButton">Set Max Levels</button>
      <div id="playersList">
        <div style="display:flex;justify-content:space-between;gap:20px;">
          <div>
            <h4>Left Team</h4>
            <ul id="playersLeft" class="list-unstyled"></ul>
          </div>
          <div>
            <h4>Right Team</h4>
            <ul id="playersRight" class="list-unstyled"></ul>
          </div>
        </div>
      </div>
      <br>
      <label for="gameTimeInput">Game Time (minutes):</label>
      <input type="number" id="gameTimeInput" value="10" min="1" max="10">
      <br>
      <button id="setGameTimeButton">Set Game Time</button>
      <br>
      <button id="closeModal">Close & Start Game</button>
    </div>
  </div>
  <div id="overlay">
    <div id="timeBarContainer">
      <div id="timeBar"></div>
      <span id="timeText">0s</span>
    </div>
    <div id="scoreContainer">
      <div id="blueScore" class="scoreBox scoreBlue">0</div>
      <div id="redScore" class="scoreBox scoreRed">0</div>
    </div>
  </div>
  <div id="winnerPopup" style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); background:rgba(0,0,0,0.9); padding:20px; border-radius:8px; z-index:10000; color:#fff; text-align:center;">
    <h2 id="winnerTitle"></h2>
    <div style="display:flex; justify-content:space-around; gap:40px; margin-top:10px;">
      <div>
        <h3>Blue Team</h3>
        <ul id="winnerBlue" style="list-style:none; padding:0;"></ul>
      </div>
      <div>
        <h3>Red Team</h3>
        <ul id="winnerRed" style="list-style:none; padding:0;"></ul>
      </div>
    </div>
    <button id="closeWinner" style="margin-top:15px; padding:6px 12px;">Close</button>
    <span id="timer">Time: 0s</span> |
    <span id="scoreboard">Blue: 0 - Red: 0</span>
  </div>
  <div id="winnerPopup" style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); background:rgba(0,0,0,0.9); padding:20px; border-radius:8px; z-index:10000; color:#fff; text-align:center;">
    <h2 id="winnerTitle"></h2>
    <div style="display:flex; justify-content:space-around; gap:40px; margin-top:10px;">
      <div>
        <h3>Blue Team</h3>
        <ul id="winnerBlue" style="list-style:none; padding:0;"></ul>
      </div>
      <div>
        <h3>Red Team</h3>
        <ul id="winnerRed" style="list-style:none; padding:0;"></ul>
      </div>
    </div>
    <button id="closeWinner" style="margin-top:15px; padding:6px 12px;">Close</button>
  </div>
  <canvas id="gameCanvas"></canvas>
  
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.1/build/qrcode.min.js"></script>
  <script>
    const socket = io();
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');

    const blueSprite = new Image();
    blueSprite.src = "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='40' height='40'><circle cx='20' cy='20' r='18' fill='%23007BFF' stroke='%230056b3' stroke-width='4'/></svg>";
    const redSprite = new Image();
    redSprite.src = "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='40' height='40'><circle cx='20' cy='20' r='18' fill='%23FF4136' stroke='%23d62d20' stroke-width='4'/></svg>";
    const bulletSprite = new Image();
    bulletSprite.src = "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16'><circle cx='8' cy='8' r='7' fill='%23ffffff' stroke='%23000' stroke-width='2'/></svg>";

    function resizeCanvas(){
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      socket.emit('canvasDimensions', { width: canvas.width, height: canvas.height });
    }
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    const joinURL = "<%= joinURL %>";
    QRCode.toCanvas(document.getElementById('qrCode'), joinURL, (err) => {
      if (err) console.error(err);
      console.log('QR code generated for:', joinURL);
    });

    document.getElementById('setGameTimeButton').addEventListener('click', () => {
      const minutes = document.getElementById('gameTimeInput').value;
      socket.emit('setGameTime', minutes);
    });

    document.getElementById('setMaxLevelButton').addEventListener('click', () => {
      const lvl = document.getElementById('maxLevelInput').value;
      socket.emit('setMaxLevels', lvl);
    });
    document.getElementById('closeModal').addEventListener('click', () => {
      document.getElementById('qrModal').style.display = 'none';
      document.getElementById('blueTeamPopup').style.display = 'none';
      document.getElementById('redTeamPopup').style.display = 'none';
      document.getElementById('winnerPopup').style.display = 'none';
      socket.emit('startGame');
    });

    document.getElementById('closeWinner').addEventListener('click', () => {
      document.getElementById('winnerPopup').style.display = 'none';
    });

    let winnerShown = false;

    socket.on('gameState', (data) => {
      const duration = data.gameDuration || 1;
      const progress = ((duration - data.gameTimer) / duration) * 100;
      document.getElementById('timeBar').style.width = progress + '%';
      document.getElementById('timeText').innerText = data.gameTimer + 's';
      document.getElementById('blueScore').innerText = data.scoreBlue;
      document.getElementById('redScore').innerText = data.scoreRed;
      if (!data.gameStarted) {
        const leftEl = document.getElementById('playersLeft');
        const rightEl = document.getElementById('playersRight');
        leftEl.innerHTML = '';
        rightEl.innerHTML = '';
        Object.values(data.players).forEach(p => {
          const li = document.createElement('li');
          li.textContent = p.name || 'Unnamed';
          if (p.team === 'left') leftEl.appendChild(li);
          else rightEl.appendChild(li);
        });
      }
      drawGame(data);
      if (data.gameOver) {
        if (!winnerShown) {
          winnerShown = true;
          showWinner(data);
        }
      } else {
        winnerShown = false;
      }
    });

    function showWinner(data) {
      const popup = document.getElementById('winnerPopup');
      const title = document.getElementById('winnerTitle');
      const blueList = document.getElementById('winnerBlue');
      const redList = document.getElementById('winnerRed');

      title.textContent = `Blue ${data.scoreBlue} - ${data.scoreRed} Red`;
      blueList.innerHTML = '';
      redList.innerHTML = '';
      Object.values(data.players).forEach(p => {
        const li = document.createElement('li');
        li.textContent = p.name || 'Unnamed';
        if (p.team === 'left') blueList.appendChild(li); else redList.appendChild(li);
      });

      popup.style.display = 'block';
    }

    function drawGame(data){
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const gradLeft = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradLeft.addColorStop(0, '#003');
      gradLeft.addColorStop(1, '#007');
      const gradRight = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradRight.addColorStop(0, '#300');
      gradRight.addColorStop(1, '#900');
      ctx.fillStyle = gradLeft;
      ctx.fillRect(0, 0, canvas.width / 2, canvas.height);
      ctx.fillStyle = gradRight;
      ctx.fillRect(canvas.width / 2, 0, canvas.width / 2, canvas.height);
      
      data.bullets.forEach(bullet => {
        ctx.drawImage(bulletSprite, bullet.x - bullet.radius, bullet.y - bullet.radius, bullet.radius * 2, bullet.radius * 2);
      });
      
      for (const id in data.players) {
        const player = data.players[id];
        const img = player.team === 'left' ? blueSprite : redSprite;
        ctx.drawImage(img, player.x - player.radius, player.y - player.radius, player.radius * 2, player.radius * 2);
        if (player.name) {
          ctx.font = "14px sans-serif";
          ctx.fillStyle = "#fff";
          ctx.textAlign = "center";
          ctx.fillText(player.name, player.x, player.y - player.radius - 30);
        }
        ctx.font = "14px sans-serif";
        ctx.fillStyle = "#fff";
        ctx.textAlign = "center";
        ctx.fillText(`Lv:${player.level} L:${player.lives} S:${player.shield}`, player.x, player.y - player.radius - 12);
        ctx.font = "bold 16px sans-serif";
        ctx.fillStyle = "#000";
        ctx.fillText(player.level, player.x, player.y + 5);
      }
    }
  </script>
</body>
</html>
