<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Space Battle Pong – Command Center</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />

  <!-- FONTS & ICONS -->
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />

  <!-- THEME & LAYOUT -->
  <style>
    :root{
      --blue-team:#00b3ff;
      --red-team:#ff273d;
      --neutral:#ffffff;
      --bg-dark:#0a0d13;
      --bg-mid:#142134;
    }
    *{margin:0;padding:0;box-sizing:border-box;}
    html,body{height:100%;width:100%;overflow:hidden;font-family:'Orbitron',sans-serif;color:var(--neutral);}
    body{background:radial-gradient(ellipse at bottom,var(--bg-mid) 0%,var(--bg-dark) 100%);}    
    body::before{content:"";position:fixed;inset:0;width:300%;height:300%;background:url("https://raw.githubusercontent.com/Kieran-Brown/assets/main/stars_2.png") repeat;animation:starShift 140s linear infinite;pointer-events:none;}
    @keyframes starShift{from{transform:translateY(0);}to{transform:translateY(-50%);}}

    /* ===== Canvas ===== */
    #gameCanvas{position:absolute;top:0;left:0;display:block;background:transparent;}
    .blur{filter:blur(5px);transition:filter .35s;}

    /* ===== Team lists ===== */
    .teamPopup{position:fixed;top:50%;transform:translateY(-50%);width:clamp(260px,24vw,360px);max-height:80vh;overflow-y:auto;background:rgba(0,0,0,.78);backdrop-filter:blur(4px);border-radius:10px;padding:1.25rem;font-size:1rem;z-index:10001;}
    #blueTeamPopup{left:20px;border:2px solid var(--blue-team);}    
    #redTeamPopup {right:20px;border:2px solid var(--red-team);}    
    .teamPopup h4{margin-bottom:.5rem;font-size:1.25rem;}
    .teamPopup li{display:flex;justify-content:space-between;align-items:center;margin-bottom:.35rem;}
    .playerName{cursor:move;}
    .removeBtn{cursor:pointer;color:var(--red-team);}

    /* ===== QR/settings modal ===== */
    #qrModal{position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:rgba(0,0,0,.8);padding:1rem;z-index:9990;}
    #qrContainer{background:rgba(0,0,0,.55);backdrop-filter:blur(6px);border:2px solid var(--neutral);border-radius:12px;padding:2rem 2.5rem;max-width:clamp(340px,50vw,650px);max-height:90vh;overflow-y:auto;text-align:center;}
    #qrContainer h2{font-size:1.8rem;margin-bottom:1rem;}

    #legend ul{margin:.25rem 0 0 1.25rem;}
    #legend li{margin-bottom:4px;font-size:.95rem;}

    /* ===== HUD ===== */
    #overlay{position:absolute;top:0;left:0;width:100%;pointer-events:none;display:flex;flex-direction:column;align-items:center;}

    /* Row with scores + timer */
    #scoreContainer{width:100%;display:flex;align-items:center;gap:.6rem;padding:6px 12px;}
    .scoreBox{flex:0 0 auto;font-size:2rem;padding:.1rem 1rem;border-radius:6px;background:var(--neutral);color:#000;border:3px solid var(--neutral);} /* default white outline, overridden below */
    .scoreBlue{border-color:var(--blue-team);}    
    .scoreRed {border-color:var(--red-team);}    

    #timeBarContainer{flex:1;position:relative;height:22px;}
    #timeSegments{display:flex;height:100%;margin:0;padding:0;list-style:none;}
    #timeSegments li{flex:1;margin-right:2px;height:100%;box-shadow:inset 0 0 10px 1px rgba(117,182,255,0.4),0 0 20px rgba(117,182,255,0.1);}
    #timeSegments li:last-child{margin-right:0;}
    #timeSegments li.filled{background:rgba(255,255,255,0.9);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 20px rgba(117,182,214,0.5);}
    #timeSegments li.active{-webkit-animation:pulse 1s alternate infinite;-moz-animation:pulse 1s alternate infinite;}
    #timeText{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;font-size:.9rem;color:#fff;pointer-events:none;transition:color .2s;}

    @-webkit-keyframes pulse{0%{background:rgba(255,255,255,1);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 40px 2px rgba(105,135,255,1);}100%{background:rgba(255,255,255,0);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 30px 2px rgba(105,135,255,0.3);}}
    @-moz-keyframes pulse{0%{background:rgba(255,255,255,1);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 40px 2px rgba(105,135,255,1);}100%{background:rgba(255,255,255,0);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 30px 2px rgba(105,135,255,0.3);}}

    /* Pause button centred under bar */
    #pauseButton{pointer-events:auto;align-self:center;margin-top:4px;background:var(--neutral);color:#000;border:none;font-size:1.4rem;padding:.15rem 1.4rem;border-radius:6px;}
    #pauseButton:hover{box-shadow:0 0 6px var(--neutral);}    

    /* ===== generic popups ===== */
    .popup{position:fixed;inset:0;display:none;flex-direction:column;align-items:center;justify-content:center;background:rgba(0,0,0,.85);padding:1rem;z-index:10002;text-align:center;}
    .popupBtn{margin:.6rem;padding:.6rem 1.8rem;font-size:1rem;background:var(--neutral);color:#000;border:none;border-radius:6px;}
    .popupBtn:hover{box-shadow:0 0 6px var(--neutral);}    

    #leaderboardPopup>div{display:flex;gap:2rem;flex-wrap:wrap;justify-content:center;max-width:90vw;}

    /* Winner grid */
    #winnerPopupInner{display:grid;grid-template-columns:1fr 1fr;gap:2rem;}
    @media(max-width:700px){#winnerPopupInner{grid-template-columns:1fr;}}

    /* Kill feed/messages */
    #killMessages{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);display:flex;flex-direction:column;align-items:center;gap:.5rem;pointer-events:none;z-index:10003;}
    .killMessage{padding:.5rem 1rem;background:rgba(0,0,0,.6);border-radius:6px;font-size:1.3rem;opacity:1;transition:opacity 2s;}
    #killFeed{position:fixed;top:60px;right:10px;width:260px;display:flex;flex-direction:column;align-items:flex-end;gap:.25rem;opacity:.7;pointer-events:none;font-size:.9rem;z-index:10002;}
    .killFeedItem{background:rgba(0,0,0,.5);padding:.25rem .5rem;border-radius:4px;}
  </style>
</head>
<body>
  <!-- TEAM POPUPS -->
  <div id="blueTeamPopup" class="teamPopup">
    <h4>Blue Team</h4>
    <ul id="playersLeft" class="list-unstyled"></ul>
    <button id="addBotLeft" class="btn btn-sm btn-light mt-2">Add Bot</button>
  </div>
  <div id="redTeamPopup"  class="teamPopup">
    <h4>Red Team</h4>
    <ul id="playersRight" class="list-unstyled"></ul>
    <button id="addBotRight" class="btn btn-sm btn-light mt-2">Add Bot</button>
  </div>

  <!-- QR / SETTINGS -->
  <div id="qrModal"><div id="qrContainer">
    <h2><i class="bi bi-qr-code"></i> Scan to Join</h2>
    <canvas id="qrCode"></canvas>
    <div id="legend" class="text-start mt-3">
      <strong class="text-decoration-underline">Power-Ups</strong>
      <ul class="mt-1"><li><b>Damage</b> – increase bullet damage</li><li><b>Diagonal</b> – shoot diagonally</li><li><b>Shield</b> – gain protective shield</li><li><b>More Bullets</b> – fire additional shots</li><li><b>Bullet Speed</b> – faster projectiles</li><li><b>Health</b> – extra hull integrity</li></ul>
    </div>
    <!-- settings table (unchanged IDs) -->
    <table id="settingsTable" class="mx-auto mt-3">
      <tr id="timeRow">
        <td><label for="gameTimeMinutes">Game Time</label></td>
        <td>
          <div class="d-flex gap-1">
            <input type="number" id="gameTimeMinutes" value="10" min="0" max="10" class="form-control form-control-sm" style="width:5rem;">
            <span class="align-self-center">min</span>
            <input type="number" id="gameTimeSeconds" value="0" min="0" max="59" class="form-control form-control-sm" style="width:5rem;">
            <span class="align-self-center">sec</span>
          </div>
        </td>
      </tr>
      <tr id="levelRow"><td><label for="maxLevelInput">Max Levels</label></td><td><input type="number" id="maxLevelInput" value="<%= defaultCap %>" min="1" max="<%= maxAllowedCap %>" class="form-control form-control-sm"></td></tr>
      <tr><td><label for="gameModeSelect">Game Mode</label></td><td><select id="gameModeSelect" class="form-select form-select-sm"><option value="classic">Casual</option><option value="control">Point Control</option><option value="tdm">Team Deathmatch</option></select></td></tr>
      <tr id="roundRow" style="display:none;"><td><label for="maxRoundsInput">Max Rounds</label></td><td><input type="number" id="maxRoundsInput" value="5" min="1" max="20" class="form-control form-control-sm"></td></tr>
    </table>
    <button id="closeModal" class="btn btn-light mt-3"><i class="bi bi-play-fill"></i> Start Game</button>
  </div></div>

  <!-- HUD -->
  <div id="overlay">
    <div id="scoreContainer">
      <div id="blueScore" class="scoreBox scoreBlue">0</div>
      <div id="timeBarContainer"><ul id="timeSegments"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><span id="timeText">0s</span></div>
      <div id="redScore" class="scoreBox scoreRed">0</div>
    </div>
    <button id="pauseButton">II</button>
  </div>

  <!-- GENERIC POPUPS -->
  <div id="pausePopup" class="popup"><button id="continueButton" class="popupBtn">Continue</button><button id="restartButton" class="popupBtn">Restart</button><button id="endButton" class="popupBtn">End Game</button></div>
  <div id="leaderboardPopup" class="popup"><h2>Leaderboard</h2><div><div><h3 style="color:var(--blue-team)">Blue Fleet</h3><table id="lbBlue" class="table table-dark table-sm"></table></div><div><h3 style="color:var(--red-team)">Red Fleet</h3><table id="lbRed" class="table table-dark table-sm"></table></div></div></div>

  <div id="winnerPopup" class="popup" style="max-width:950px;margin:auto;">
    <h2 id="winnerTitle"></h2>
    <div id="winnerPopupInner" class="mt-2"><div><h3 style="color:var(--blue-team)">Blue Team</h3><ul id="winnerBlue" class="list-unstyled"></ul></div><div><h3 style="color:var(--red-team)">Red Team</h3><ul id="winnerRed" class="list-unstyled"></ul></div></div>
    <div class="mt-2"><span id="timer">Time: 0s</span> | <span id="scoreboard">Blue: 0 - Red: 0</span></div>
    <div class="mt-3"><button id="closeWinner" class="popupBtn">Close</button><button id="restartFinal" class="popupBtn">Restart</button></div>
  </div>

  <!-- CANVAS + FEEDS -->
  <canvas id="gameCanvas"></canvas>
  <div id="killMessages"></div>
  <div id="killFeed"></div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.1/build/qrcode.min.js"></script>
  <script>
    const socket = io();
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');

    /*****************************************************************
    *  FLOATING TEXT (damage / regen)
    *****************************************************************/
    const floatingTexts = [];
    function spawnFloatingText({ x, y, text, color = '#fff', lifespan = 1000 }) {
      floatingTexts.push({ x, y, text, color, lifespan, born: performance.now() });
    }

    function drawFloatingTexts() {
      const now = performance.now();
      for (let i = floatingTexts.length - 1; i >= 0; i--) {
        const f = floatingTexts[i];
        const age = now - f.born;
        if (age > f.lifespan) {
          floatingTexts.splice(i, 1);
          continue;
        }
        const alpha = 1 - age / f.lifespan;
        ctx.save();
        ctx.font = '18px Orbitron, sans-serif';
        ctx.fillStyle = f.color;
        ctx.globalAlpha = alpha;
        ctx.textAlign = 'center';
        ctx.fillText(f.text, f.x, f.y - age * 0.05);   // slight upward drift
        ctx.restore();
      }
    }

    const blueSprite = new Image();
    blueSprite.src = "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='40' height='40'><circle cx='20' cy='20' r='18' fill='%23007BFF' stroke='%230056b3' stroke-width='4'/></svg>";
    const redSprite = new Image();
    redSprite.src = "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='40' height='40'><circle cx='20' cy='20' r='18' fill='%23FF4136' stroke='%23d62d20' stroke-width='4'/></svg>";
    const bulletSprites = { left: [], right: [] };
    for (let i = 32; i < 40; i++) {
      const idx = String(i).padStart(3, '0');
      const r = new Image();
      r.src = `/assets/Bullets/bullet${idx}.png`;
      bulletSprites.right.push(r);
      const b = new Image();
      b.src = `/assets/Bullets/tile${idx}.png`;
      bulletSprites.left.push(b);
    }
    let bulletFrameTick = 0;
    let gradLeft, gradRight;

    let killTemplates = ["{name2} killed {name1}"];
    fetch('/messages.json').then(r => r.json()).then(j => { killTemplates = j; }).catch(()=>{});

    function resizeCanvas(){
      const overlayH = document.getElementById('overlay').offsetHeight;
      canvas.style.top = overlayH + 'px';
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight - overlayH;
      gradLeft = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradLeft.addColorStop(0, '#003');
      gradLeft.addColorStop(1, '#007');
      gradRight = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradRight.addColorStop(0, '#300');
      gradRight.addColorStop(1, '#900');
      socket.emit('canvasDimensions', { width: canvas.width, height: canvas.height });
    }
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    const joinURL = "<%= joinURL %>";
    QRCode.toCanvas(document.getElementById('qrCode'), joinURL, (err) => {
      if (err) console.error(err);
      console.log('QR code generated for:', joinURL);
    });

    const leftList = document.getElementById('playersLeft');
    const rightList = document.getElementById('playersRight');
    const leftPopup = document.getElementById('blueTeamPopup');
    const rightPopup = document.getElementById('redTeamPopup');

    [leftList, rightList, leftPopup, rightPopup].forEach(el => {
      el.addEventListener('dragover', e => e.preventDefault());
    });

    function handleDrop(team) {
      return (e) => {
        e.preventDefault();
        const pid = e.dataTransfer.getData('playerId');
        if (pid) socket.emit('setTeam', { playerId: pid, team });
      };
    }
    [leftList, leftPopup].forEach(el => el.addEventListener('drop', handleDrop('left')));
    [rightList, rightPopup].forEach(el => el.addEventListener('drop', handleDrop('right')));

    const addLeft = document.getElementById('addBotLeft');
    const addRight = document.getElementById('addBotRight');
    addLeft.addEventListener('click', () => socket.emit('addBot', 'left'));
    addRight.addEventListener('click', () => socket.emit('addBot', 'right'));
    const modeSelect = document.getElementById('gameModeSelect');
    function updateModeRows() {
      const isTdm = modeSelect.value === 'tdm';
      document.getElementById('timeRow').style.display = isTdm ? 'none' : '';
      document.getElementById('levelRow').style.display = isTdm ? 'none' : '';
      document.getElementById('roundRow').style.display = isTdm ? '' : 'none';
    }
    modeSelect.addEventListener('change', updateModeRows);
    updateModeRows();

    document.getElementById('closeModal').addEventListener('click', () => {
      const mins = parseInt(document.getElementById('gameTimeMinutes').value) || 0;
      const secs = parseInt(document.getElementById('gameTimeSeconds').value) || 0;
      const minutes = mins + secs / 60;
      const lvl = document.getElementById('maxLevelInput').value;
      const mode = modeSelect.value;
      if (mode !== 'tdm') {
        socket.emit('setGameTime', minutes);
        socket.emit('setMaxLevels', lvl);
      } else {
        const rounds = document.getElementById('maxRoundsInput').value;
        socket.emit('setMaxRounds', rounds);
      }
      socket.emit('setGameMode', mode);
      document.getElementById('qrModal').style.display = 'none';
      document.getElementById('blueTeamPopup').style.display = 'none';
      document.getElementById('redTeamPopup').style.display = 'none';
      document.getElementById('winnerPopup').style.display = 'none';
      socket.emit('startGame');
    });

    document.getElementById('closeWinner').addEventListener('click', () => {
      document.getElementById('winnerPopup').style.display = 'none';
      document.getElementById('overlay').classList.remove('blur');
      document.getElementById('gameCanvas').classList.remove('blur');
    });

    document.getElementById('pauseButton').addEventListener('click', () => {
      socket.emit('pauseGame');
      document.getElementById('pausePopup').style.display = 'flex';
    });
    document.getElementById('continueButton').addEventListener('click', () => {
      socket.emit('resumeGame');
      document.getElementById('pausePopup').style.display = 'none';
    });
    function showStartScreen() {
      document.getElementById('qrModal').style.display = 'flex';
      document.getElementById('blueTeamPopup').style.display = 'block';
      document.getElementById('redTeamPopup').style.display = 'block';
      document.getElementById('overlay').classList.remove('blur');
      document.getElementById('gameCanvas').classList.remove('blur');
    }

    document.getElementById('restartButton').addEventListener('click', () => {
      socket.emit('restartGame');
      document.getElementById('pausePopup').style.display = 'none';
      showStartScreen();
    });
    document.getElementById('endButton').addEventListener('click', () => {
      socket.emit('endGame');
      document.getElementById('pausePopup').style.display = 'none';
      document.getElementById('overlay').classList.add('blur');
      document.getElementById('gameCanvas').classList.add('blur');
    });
    document.getElementById('restartFinal').addEventListener('click', () => {
      socket.emit('restartGame');
      document.getElementById('winnerPopup').style.display = 'none';
      document.getElementById('overlay').classList.remove('blur');
      document.getElementById('gameCanvas').classList.remove('blur');
      showStartScreen();
    });

    function showKillMessage(text) {
      const container = document.getElementById('killMessages');
      const el = document.createElement('div');
      el.className = 'killMessage';
      el.textContent = text;
      container.appendChild(el);
      // limit to 5 messages
      while (container.children.length > 5) {
        container.firstElementChild.remove();
      }
      setTimeout(() => {
        el.style.opacity = '0';
        setTimeout(() => el.remove(), 2000);
      }, 2000);
    }

    const killFeedMessages = [];
    function addKillFeed(text) {
      killFeedMessages.push(text);
      if (killFeedMessages.length > 5) killFeedMessages.shift();
      const container = document.getElementById('killFeed');
      container.innerHTML = '';
      killFeedMessages.forEach(msg => {
        const div = document.createElement('div');
        div.className = 'killFeedItem';
        div.textContent = msg;
        container.appendChild(div);
      });
    }

    let winnerShown = false;

    socket.on('gameState', (data) => {
      const duration = data.gameDuration || 1;
      const progress = (duration - data.gameTimer) / duration;
      const segs = document.querySelectorAll('#timeSegments li');
      segs.forEach((seg,i)=>{
        const start = i / segs.length;
        const end = (i+1) / segs.length;
        seg.classList.toggle('filled', progress >= end);
        seg.classList.toggle('active', progress >= start && progress < end);
      });
      const mid = segs[Math.floor(segs.length/2)];
      const timeText = document.getElementById('timeText');
      timeText.style.color = mid.classList.contains('filled') ? '#000' : '#fff';
      timeText.innerText = data.gameTimer + 's';
      document.getElementById('blueScore').innerText = data.scoreBlue;
      document.getElementById('redScore').innerText = data.scoreRed;
      document.getElementById('pausePopup').style.display = data.gamePaused ? 'flex' : 'none';
      if (!data.gameStarted) {
        updateTeamLists(data);
      }
      if (!data.gameOver) {
        drawGame(data);
      } else {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        if (!winnerShown) {
          winnerShown = true;
          showWinner(data);
        }
      }
    });

    socket.on('kill', ({ killer, victim }) => {
      const tpl = killTemplates[Math.floor(Math.random() * killTemplates.length)] || '{name2} killed {name1}';
      const msg = tpl.replace('{name1}', victim).replace('{name2}', killer);
      showKillMessage(msg);
      addKillFeed(msg);
    });

    socket.on('damagePopup', ({ x, y, amount }) => {
      spawnFloatingText({ x, y, text: `-${amount}`, color: '#ff273d' }); // red
    });

    socket.on('regenPopup', ({ x, y, amount, type }) => {
      const color = type === 'shield' ? '#00b3ff' : '#00ff80';           // blue or green
      spawnFloatingText({ x, y, text: `+${amount}`, color });
    });

    function showWinner(data) {
      const popup = document.getElementById('winnerPopup');
      const title = document.getElementById('winnerTitle');
      const blueList = document.getElementById('winnerBlue');
      const redList = document.getElementById('winnerRed');

      if (data.scoreBlue === data.scoreRed) {
        title.textContent = 'Draw';
      } else if (data.scoreBlue > data.scoreRed) {
        title.textContent = 'Winner Blue Team';
      } else {
        title.textContent = 'Winner Red Team';
      }
      document.getElementById('scoreboard').textContent = `Blue: ${data.scoreBlue} - Red: ${data.scoreRed}`;
      blueList.innerHTML = '';
      redList.innerHTML = '';
      const all = Object.values(data.players).filter(p => !p.isBot);
      const blue = all.filter(p => p.team === 'left')
        .sort((a,b)=> (b.kills+b.assists)-(a.kills+a.assists));
      const red = all.filter(p => p.team === 'right')
        .sort((a,b)=> (b.kills+b.assists)-(a.kills+a.assists));
      const medals = ['🥇','🥈','🥉'];
      function append(list, arr){
        arr.forEach((p,idx)=>{
          const li=document.createElement('li');
          const score=(p.kills||0)+(p.assists||0);
          const medal=medals[idx]||'';
          li.textContent=`${medal} ${p.name||'Unnamed'} - score: ${score}`;
          list.appendChild(li);
        });
      }
      append(blueList, blue);
      append(redList, red);
      document.getElementById('overlay').classList.add('blur');
      document.getElementById('gameCanvas').classList.add('blur');
      popup.style.display = 'block';
    }

    function updateTeamLists(data) {
      const leftEl = document.getElementById('playersLeft');
      const rightEl = document.getElementById('playersRight');
      leftEl.innerHTML = '';
      rightEl.innerHTML = '';
      let leftCount = 0, rightCount = 0;
      Object.values(data.players).forEach(p => {
        const li = document.createElement('li');
        const name = document.createElement('span');
        name.className = 'playerName';
        name.textContent = p.name || 'Unnamed';
        if (!p.isBot) {
          name.draggable = true;
          name.addEventListener('dragstart', (e) => {
            e.dataTransfer.setData('playerId', p.id);
          });
        }
        const remove = document.createElement('span');
        remove.textContent = '❌';
        remove.className = 'removeBtn';
        remove.draggable = false;
        remove.addEventListener('click', (ev) => {
          ev.stopPropagation();
          socket.emit('removePlayer', p.id);
          li.remove();
        });
        li.appendChild(name);
        li.appendChild(remove);
        if (p.team === 'left') { leftEl.appendChild(li); leftCount++; }
        else { rightEl.appendChild(li); rightCount++; }
      });
      document.querySelector('#blueTeamPopup h4').textContent = `Blue Team (${leftCount})`;
      document.querySelector('#redTeamPopup h4').textContent = `Red Team (${rightCount})`;
    }

    function drawGame(data){
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = gradLeft;
      ctx.fillRect(0, 0, canvas.width / 2, canvas.height);
      ctx.fillStyle = gradRight;
      ctx.fillRect(canvas.width / 2, 0, canvas.width / 2, canvas.height);

      if (data.pointAreas) {
        for (const team in data.pointAreas) {
          const area = data.pointAreas[team];
          if (!area) continue;
          ctx.beginPath();
          ctx.fillStyle = team === 'left' ? 'rgba(0,0,255,0.3)' : 'rgba(255,0,0,0.3)';
          ctx.strokeStyle = '#fff';
          ctx.arc(area.x, area.y, area.radius, 0, Math.PI * 2);
          ctx.fill();
          ctx.stroke();
        }
      }
      
      const frame = Math.floor(bulletFrameTick / 5) % 8;
      bulletFrameTick++;
      data.bullets.forEach(bullet => {
        const img = bulletSprites[bullet.team][frame];
        if (img) ctx.drawImage(img, bullet.x - bullet.radius, bullet.y - bullet.radius, bullet.radius * 2, bullet.radius * 2);
      });
      
      for (const id in data.players) {
        const p = data.players[id];

        /* ----------------------------------------------------------
          3A.  Draw the ship sprite
        ---------------------------------------------------------- */
        const sprite = p.team === 'left' ? blueSprite : redSprite;
        ctx.drawImage(sprite, p.x - p.radius, p.y - p.radius,
                      p.radius * 2, p.radius * 2);

        /* ----------------------------------------------------------
          3B.  Shield + health bars
        ---------------------------------------------------------- */
        const barWidth  = p.radius * 2;
        const barHeight = 6;
        const barX      = p.x - barWidth / 2;
        const barY      = p.y - p.radius - 36;   // adjust vertical gap here

        // background rails
        ctx.fillStyle = 'rgba(0,0,0,0.6)';
        ctx.fillRect(barX, barY, barWidth, barHeight);
        ctx.fillRect(barX, barY + barHeight + 2, barWidth, barHeight);

        // blue shield
        const shieldPct = (p.shield || 0) / (p.shieldMax || 1);
        ctx.fillStyle = 'rgba(0,179,255,0.85)';
        ctx.fillRect(barX, barY, barWidth * shieldPct, barHeight);

        // red health
        const hpPct = (p.lives || 0) / (p.maxLives || 1);
        ctx.fillStyle = 'rgba(255,39,61,0.85)';
        ctx.fillRect(barX, barY + barHeight + 2, barWidth * hpPct, barHeight);

        /* ----------------------------------------------------------
          3C.  Player name & stats
        ---------------------------------------------------------- */
        ctx.font = '16px Orbitron, sans-serif';
        ctx.fillStyle = '#ffffff';
        ctx.textAlign = 'center';
        ctx.fillText(p.name || 'Anon', p.x, barY - 8);

        /* ----------------------------------------------------------
          3D.  Level badge (black number on hull)
        ---------------------------------------------------------- */
        ctx.font = 'bold 16px Orbitron, sans-serif';
        ctx.fillStyle = '#000';
        ctx.fillText(p.level, p.x, p.y + 6);
      }
      drawFloatingTexts();
    }
  </script>
</body>
</html>
