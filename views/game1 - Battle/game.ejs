<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Space Battle Pong – Command Center</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />

  <!-- FONTS & ICONS -->
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="/checkboxX.css" />
  <link rel="stylesheet" href="/customScrollbar.css" />

  <!-- THEME & LAYOUT -->
  <style>
    :root{
      --blue-team:#00b3ff;
      --red-team:#ff273d;
      --neutral:#ffffff;
      --bg-dark:#0a0d13;
      --bg-mid:#142134;
    }
    *{margin:0;padding:0;box-sizing:border-box;}
    html,body{height:100%;width:100%;overflow:hidden;font-family:'Orbitron',sans-serif;color:var(--neutral);}
    body{background:radial-gradient(ellipse at bottom,var(--bg-mid) 0%,var(--bg-dark) 100%);}    
    body::before{content:"";position:fixed;inset:0;width:300%;height:300%;background:url("https://raw.githubusercontent.com/Kieran-Brown/assets/main/stars_2.png") repeat;animation:starShift 140s linear infinite;pointer-events:none;}
    @keyframes starShift{from{transform:translateY(0);}to{transform:translateY(-50%);}}

    /* ===== Canvas ===== */
    #gameCanvas{position:absolute;top:0;left:0;display:block;background:transparent;}
    .blur{filter:blur(5px);transition:filter .35s;}

    /* ===== Team lists ===== */
    .teamPopup{
      position:fixed;
      top:0;
      width:clamp(300px,28vw,420px);
      max-height:80vh;
      overflow-y:auto;
      background:rgba(0,0,0,.78);
      backdrop-filter:blur(4px);
      border-radius:10px;
      padding:1.25rem;
      font-size:1rem;
      z-index:10001;
    }
    #blueTeamPopup{left:20px;border:2px solid var(--blue-team);}    
    #redTeamPopup {right:20px;border:2px solid var(--red-team);}    
    .teamPopup h4{margin-bottom:.5rem;font-size:1.25rem;}
    .teamPopup li{display:flex;align-items:center;gap:.5rem;padding:.25rem 0;margin-bottom:.35rem;}
    .playerName{cursor:move;}
    .removeBtn{cursor:pointer;color:var(--red-team);}
    .behaviorSelect{width:7rem;margin-left:auto;}

    /* ===== QR/settings modal ===== */
    #qrModal{position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:rgba(0,0,0,.8);padding:1rem;z-index:9990;}
    #qrContainer{
      background:rgba(0,0,0,.55);
      backdrop-filter:blur(6px);
      border:2px solid var(--neutral);
      border-radius:12px;
      padding:2rem 2.5rem;
      max-width:clamp(340px,60vw,750px);
      max-height:95vh;
      overflow-y:auto;
      text-align:center;
    }
    #qrContainer h2{font-size:1.8rem;margin-bottom:1rem;}

    #settingsPopup{
      max-width:clamp(600px,80vw,1200px);
      margin:auto;
      background:rgba(0,0,0,.55);
      backdrop-filter:blur(6px);
      border:2px solid var(--neutral);
      border-radius:12px;
      padding:2rem 2.5rem;
      overflow-y:auto;
    }


    #settingsPopup .form-check,
    #settingsPopup .form-select{margin-bottom:.75rem;}
    #settingsPopup .form-check{
      display:grid;
      grid-template-columns:1fr auto;
      align-items:center;
      text-align:left;
      column-gap:1rem;
      margin-bottom:.75rem;
    }
    #settingsPopup .form-check-input{margin:0;}
    .track-chooser{display:flex;align-items:center;justify-content:center;gap:.5rem;}
    .track-chooser .tc-arrow{cursor:pointer;font-size:1.2rem;user-select:none;}
    .track-chooser .tc-name-wrap{position:relative;overflow:hidden;width:8rem;height:1.2rem;}
    .track-chooser .tc-name{position:absolute;left:0;top:0;width:max-content;text-align:center;white-space:nowrap;}
    .slide-out-left{animation:tcOutLeft .25s forwards;}
    .slide-out-right{animation:tcOutRight .25s forwards;}
    .slide-in-left{animation:tcInLeft .25s forwards;}
    .slide-in-right{animation:tcInRight .25s forwards;}
    @keyframes tcOutLeft{from{transform:translateX(0);opacity:1;}to{transform:translateX(-100%);opacity:0;}}
    @keyframes tcOutRight{from{transform:translateX(0);opacity:1;}to{transform:translateX(100%);opacity:0;}}
    @keyframes tcInLeft{from{transform:translateX(-100%);opacity:0;}to{transform:translateX(0);opacity:1;}}
    @keyframes tcInRight{from{transform:translateX(100%);opacity:0;}to{transform:translateX(0);opacity:1;}}
    #musicVolume{width:100%;}

    #legend ul{margin:.25rem 0 0 1.25rem;}
    #legend li{margin-bottom:4px;font-size:.95rem;}

    /* ---- Start screen form tweaks ---- */
    #settingsTable td:first-child,
    #balanceTable td:first-child{
      text-align:left;
      padding-right:.5rem;
      white-space:nowrap;
    }
    #settingsTable td,
    #balanceTable td{padding-bottom:.5rem;}
    #settingsTable input,
    #settingsTable select,
    #balanceTable input{
      padding:.25rem .5rem;
    }
    #qrContainer .btn,
    .teamPopup .btn{min-width:7rem;}
    #startButtons .btn{flex:1;}
    #balanceRow .btn{flex:1;}

    /* ===== HUD ===== */
    #overlay{position:absolute;top:0;left:0;width:100%;pointer-events:none;display:flex;flex-direction:column;align-items:center;}

    /* Row with scores + timer */
    #scoreContainer{width:100%;display:flex;align-items:center;gap:.6rem;padding:6px 12px;}
    .scoreBox{flex:0 0 auto;font-size:2rem;padding:.1rem 1rem;border-radius:6px;background:var(--neutral);color:#000;border:3px solid var(--neutral);} /* default white outline, overridden below */
    .scoreBlue{border-color:var(--blue-team);}
    .scoreRed {border-color:var(--red-team);}
    .balance-btn{position:absolute;bottom:8px;left:8px;font-size:1rem;padding:4px 8px;pointer-events:auto;display:none;}

    #timeBarContainer{flex:1;position:relative;height:22px;pointer-events:auto;cursor:pointer;}
    #timeSegments{display:flex;height:100%;margin:0;padding:0;list-style:none;}
    #timeSegments li{flex:1;margin-right:2px;height:100%;box-shadow:inset 0 0 10px 1px rgba(117,182,255,0.4),0 0 20px rgba(117,182,255,0.1);}
    #timeSegments li:last-child{margin-right:0;}
    #timeSegments li.filled{background:rgba(255,255,255,0.9);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 20px rgba(117,182,214,0.5);}
    #timeSegments li.active{
      -webkit-animation:pulse 1s alternate infinite;
      -moz-animation:pulse 1s alternate infinite;
      animation:pulse 1s alternate infinite;
    }
    #timeText{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;font-size:.9rem;color:#fff;pointer-events:none;transition:color .2s;}

    @-webkit-keyframes pulse{0%{background:rgba(255,255,255,1);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 40px 2px rgba(105,135,255,1);}100%{background:rgba(255,255,255,0);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 30px 2px rgba(105,135,255,0.3);}}
    @-moz-keyframes pulse{0%{background:rgba(255,255,255,1);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 40px 2px rgba(105,135,255,1);}100%{background:rgba(255,255,255,0);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 30px 2px rgba(105,135,255,0.3);}}
    @keyframes pulse{0%{background:rgba(255,255,255,1);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 40px 2px rgba(105,135,255,1);}100%{background:rgba(255,255,255,0);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 30px 2px rgba(105,135,255,0.3);}}

    /* Pause via time bar */

    /* ===== generic popups ===== */
    .popup{position:fixed;inset:0;display:none;flex-direction:column;align-items:center;justify-content:center;background:rgba(0,0,0,.85);padding:1rem;z-index:10002;text-align:center;}
    .popupBtn{margin:.6rem;padding:.6rem 1.8rem;font-size:1rem;background:var(--neutral);color:#000;border:none;border-radius:6px;}
    .popupBtn:hover{box-shadow:0 0 6px var(--neutral);}    

    #leaderboardPopup>div{display:flex;gap:2rem;flex-wrap:wrap;justify-content:center;max-width:90vw;}
    .winner-content{
      width:75vw;
      height:75vh;
      max-width:75vw;
      max-height:75vh;
      overflow:auto;
      border:2px solid #fff;
      margin:auto;
      display:flex;
      flex-direction:column;
      align-items:center;
      justify-content:center;
    }
    .winner-content table{width:auto;margin:auto;}
    .winner-content th,.winner-content td{white-space:nowrap;}
    .winner-content td.nameCell{max-width:150px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}

    /* Winner grid */
    #winnerPopupInner{display:grid;grid-template-columns:1fr 1fr;gap:2rem;justify-content:center;text-align:center;}
    @media(max-width:700px){#winnerPopupInner{grid-template-columns:1fr;}}
    #winnerBlue{background:rgba(0,0,255,0.1);}
    #winnerBlue tbody tr{background:rgba(0,179,255,0.1);}
    #winnerRed{background:rgba(255,0,0,0.1);}
    #winnerRed tbody tr{background:rgba(255,39,61,0.1);}

    /* Kill feed/messages */
    #killMessages{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);display:flex;flex-direction:column;align-items:center;gap:.5rem;pointer-events:none;z-index:10003;}
    .killMessage{padding:.5rem 1rem;background:rgba(0,0,0,.6);border-radius:6px;font-size:1.3rem;opacity:1;transition:opacity 2s;}
    #killFeed{position:fixed;top:60px;right:10px;width:260px;display:flex;flex-direction:column;align-items:flex-end;gap:.25rem;opacity:.7;pointer-events:none;font-size:.9rem;z-index:10002;}
    .killFeedItem{background:rgba(0,0,0,.5);padding:.25rem .5rem;border-radius:4px;}

    /* Round / winner titles */
    #roundTitle{
      position:fixed;top:40%;left:50%;transform:translate(-50%,-50%);
      font-size:3rem;color:#fff;pointer-events:none;opacity:0;
      transition:opacity .5s;z-index:10004;text-shadow:0 0 10px #000;
    }
    #countdown{
      position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);
      font-size:5rem;color:#fff;pointer-events:none;opacity:0;
      transition:opacity .5s;z-index:10005;text-shadow:0 0 10px #000;
    }
  </style>
</head>
<body>
  <!-- TEAM POPUPS -->
  <div id="blueTeamPopup" class="teamPopup custom-scrollbar">
    <h4>Blue Team</h4>
    <ul id="playersLeft" class="list-unstyled"></ul>
    <button id="addBotLeft" class="btn btn-sm btn-light mt-2">Add Bot</button>
  </div>
  <div id="redTeamPopup"  class="teamPopup custom-scrollbar">
    <h4>Red Team</h4>
    <ul id="playersRight" class="list-unstyled"></ul>
    <button id="addBotRight" class="btn btn-sm btn-light mt-2">Add Bot</button>
  </div>

  <!-- QR / SETTINGS -->
  <div id="qrModal"><div id="qrContainer" class="custom-scrollbar">
    <h2><i class="bi bi-qr-code"></i> Scan to Join</h2>
    <canvas id="qrCode"></canvas>
    <div id="legend" class="text-start mt-3">
      <strong class="text-decoration-underline">Power-Ups</strong>
      <ul class="mt-1"><li><b>Damage</b> – increase bullet damage</li><li><b>Diagonal</b> – shoot diagonally</li><li><b>Shield</b> – gain protective shield</li><li><b>More Bullets</b> – fire additional shots</li><li><b>Bullet Speed</b> – faster projectiles</li><li><b>Health</b> – extra hull integrity</li></ul>
    </div>
    <!-- settings table (unchanged IDs) -->
    <table id="settingsTable" class="mx-auto mt-3">
      <tr id="timeRow">
        <td><label for="gameTimeMinutes">Game Time</label></td>
        <td>
          <div class="d-flex gap-1">
            <input type="number" id="gameTimeMinutes" value="10" min="0" max="10" class="form-control form-control-sm" style="width:5rem;">
            <span class="align-self-center">min</span>
            <input type="number" id="gameTimeSeconds" value="0" min="0" max="59" class="form-control form-control-sm" style="width:5rem;">
            <span class="align-self-center">sec</span>
          </div>
        </td>
      </tr>
      <tr><td><label for="gameModeSelect">Game Mode</label></td><td><select id="gameModeSelect" class="form-select form-select-sm"><option value="classic">Casual</option><option value="control">Point Control</option><option value="tdm">Team Deathmatch</option></select></td></tr>
      <tr id="spawnRow" style="display:none;"><td><label for="pointSpawnInput">Point Duration</label></td><td><div class="d-flex gap-1"><input type="number" id="pointSpawnInput" value="30" min="5" max="60" class="form-control form-control-sm" style="width:5rem;"><span class="align-self-center">sec</span></div></td></tr>
      <tr id="sizeRow" style="display:none;"><td><label for="pointSizeSelect">Area Size</label></td><td><select id="pointSizeSelect" class="form-select form-select-sm" style="width:6rem;"><option value="50">50%</option><option value="100" selected>100%</option><option value="150">150%</option><option value="200">200%</option></select></td></tr>
      <tr id="roundRow" style="display:none;"><td><label for="maxRoundsInput">Max Rounds</label></td><td><input type="number" id="maxRoundsInput" value="5" min="1" max="20" class="form-control form-control-sm"></td></tr>
    </table>
    <div id="startButtons" class="d-flex gap-2 mt-3">
      <button id="closeModal" class="btn btn-light flex-fill"><i class="bi bi-play-fill"></i> Start Game</button>
      <button id="openSettings" class="btn btn-secondary flex-fill">Settings</button>
    </div>
    <div id="balanceRow" class="d-flex gap-2 mt-2">
      <button id="openBalanceStart" class="btn btn-secondary flex-fill">Balance</button>
    </div>
  </div></div>

  <!-- HUD -->
  <div id="overlay">
    <div id="scoreContainer">
      <div id="blueScore" class="scoreBox scoreBlue">0</div>
      <div id="timeBarContainer"><ul id="timeSegments"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><span id="timeText">0s</span></div>
      <div id="redScore" class="scoreBox scoreRed">0</div>
    </div>
    <button id="balanceButton" class="balance-btn">⚙️ Balance</button>
  </div>

  <!-- GENERIC POPUPS -->
  <%- include('Views/pausePopup') %>
  <%- include('Views/leaderboardPopup') %>
  <%- include('Views/winnerPopup') %>
  <%- include('Views/settingsPopup') %>
  <%- include('Views/balancePopup') %>

  <!-- CANVAS + FEEDS -->
  <canvas id="gameCanvas"></canvas>
  <div id="killMessages"></div>
  <div id="killFeed"></div>
  <div id="roundTitle"></div>
  <div id="countdown"></div>
  <audio id="bgMusic"></audio>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.1/build/qrcode.min.js"></script>
  <script src="/trackChooser.js"></script>
  <script src="/settingsPopup.js"></script>
  <script src="/balancePopup.js"></script>
  <script src="/endGamePopup.js"></script>
  <script src="/modals.js"></script>
  <script>
    const socket = io();
    window.socket = socket;
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');

    /*****************************************************************
    *  FLOATING TEXT (damage / regen)
    *****************************************************************/
    const floatingTexts = [];
    function spawnFloatingText({ x, y, text, color = '#fff', lifespan = 1000 }) {
      floatingTexts.push({ x, y, text, color, lifespan, born: performance.now() });
    }

    function drawFloatingTexts() {
      const now = performance.now();
      for (let i = floatingTexts.length - 1; i >= 0; i--) {
        const f = floatingTexts[i];
        const age = now - f.born;
        if (age > f.lifespan) {
          floatingTexts.splice(i, 1);
          continue;
        }
        const alpha = 1 - age / f.lifespan;
        ctx.save();
        ctx.font = '18px Orbitron, sans-serif';
        ctx.fillStyle = f.color;
        ctx.globalAlpha = alpha;
        ctx.textAlign = 'center';
        ctx.fillText(f.text, f.x, f.y - age * 0.05);   // slight upward drift
        ctx.restore();
      }
    }

    const playerBody = new Image();
    // Asset will be provided in assets/Players Bodies by future commits
    playerBody.src = "/assets/Players%20Bodies/body.png";
    const bulletSprites = { left: [], right: [] };
    for (let i = 32; i < 40; i++) {
      const idx = String(i).padStart(3, '0');
      const r = new Image();
      r.src = `/assets/Bullets/bullet${idx}.png`;
      bulletSprites.right.push(r);
      const b = new Image();
      b.src = `/assets/Bullets/tile${idx}.png`;
      bulletSprites.left.push(b);
    }
    let bulletFrameTick = 0;
    let useSimpleBullets = false;
    let showDamagePopups = true;
    let showKillMsgs = true;
    let nameSize = 16;

    /* ----------------------------------------------------------
      Drawing helpers for reusability
    ---------------------------------------------------------- */
    function drawBullet(bullet, frame){
      if(useSimpleBullets){
        const color = bullet.team === 'left' ? '#00b3ff' : '#ff273d';
        ctx.beginPath();
        ctx.fillStyle = color;
        ctx.arc(bullet.x, bullet.y, bullet.radius, 0, Math.PI * 2);
        ctx.fill();
      } else {
        const img = bulletSprites[bullet.team][frame];
        if (img) ctx.drawImage(img, bullet.x - bullet.radius, bullet.y - bullet.radius, bullet.radius * 2, bullet.radius * 2);
      }
    }

    function drawPlayer(p, data){
      const faded = data.mode === 'tdm' && !p.isAlive;
      if (faded) ctx.globalAlpha = 0.35;
      ctx.save();
      ctx.translate(p.x, p.y);
      if (p.team === 'right') ctx.scale(-1, 1);
      ctx.drawImage(playerBody, -p.radius, -p.radius, p.radius * 2, p.radius * 2);
      ctx.restore();
      if (faded) { ctx.globalAlpha = 1; return; }

      const barWidth  = p.radius * 2;
      const barHeight = 6;
      const barX      = p.x - barWidth / 2;
      const barY      = p.y - p.radius - 36;

        ctx.fillStyle = 'rgba(0,0,0,0.6)';
        if(useSimpleBullets || p.shieldMax === 0){
          ctx.fillRect(barX, barY, barWidth, barHeight); // shield rail
        }
        ctx.fillRect(barX, barY + barHeight + 2, barWidth, barHeight); // health rail

        const shieldPct = (p.shield || 0) / (p.shieldMax || 1);
        const shieldColor = p.team === 'left'
          ? 'rgba(0,179,255,0.85)'
          : (useSimpleBullets ? 'rgba(0,179,255,0.85)' : 'rgba(214,45,32,0.85)');
        if(useSimpleBullets || p.shieldMax === 0){
          ctx.fillStyle = shieldColor;
          ctx.fillRect(barX, barY, barWidth * shieldPct, barHeight);
        } else if(shieldPct > 0){
          ctx.save();
          ctx.beginPath();
          ctx.arc(p.x, p.y, p.radius + 4, 0, Math.PI * 2);
          ctx.lineWidth = 8 * shieldPct;
          ctx.strokeStyle = shieldColor;
          ctx.shadowColor = shieldColor;
          ctx.shadowBlur = 8;
          ctx.stroke();
          ctx.restore();
        }

      const hpPct = (p.lives || 0) / (p.maxLives || 1);
      ctx.fillStyle = 'rgba(255,39,61,0.85)';
      ctx.fillRect(barX, barY + barHeight + 2, barWidth * hpPct, barHeight);

      ctx.font = nameSize + 'px Orbitron, sans-serif';
      ctx.fillStyle = '#ffffff';
      ctx.textAlign = 'center';
      ctx.fillText(p.name || 'Anon', p.x, barY - 8);

      ctx.font = 'bold 16px Orbitron, sans-serif';
      ctx.fillStyle = '#000';
      ctx.fillText(p.level, p.x, p.y + 6);
    }

    const lowAnimCheck = document.getElementById('settingsLowAnim');
    const damageCheck = document.getElementById('damagePopupCheck');
    const killMsgCheck = document.getElementById('killMessageCheck');
    const nameSizeSelect = document.getElementById('nameSizeSelect');
    if(lowAnimCheck){
      useSimpleBullets = lowAnimCheck.checked;
      lowAnimCheck.addEventListener('change',()=>{
        useSimpleBullets = lowAnimCheck.checked;
      });
    }
    if(damageCheck){
      showDamagePopups = damageCheck.checked;
      damageCheck.addEventListener('change',()=>{
        showDamagePopups = damageCheck.checked;
      });
    }
    if(killMsgCheck){
      showKillMsgs = !killMsgCheck.checked;
      killMsgCheck.addEventListener('change',()=>{
        showKillMsgs = !killMsgCheck.checked;
      });
    }
    if(nameSizeSelect){
      nameSize = parseInt(nameSizeSelect.value);
      nameSizeSelect.addEventListener('change',()=>{
        nameSize = parseInt(nameSizeSelect.value);
      });
    }
    let lastPlayerListSig = '';
    let gradLeft, gradRight;

    let killTemplates = ["{name2} killed {name1}"];
    fetch('/messages.json').then(r => r.json()).then(j => { killTemplates = j; }).catch(()=>{});

    function resizeCanvas(){
      const overlayH = document.getElementById('overlay').offsetHeight;
      canvas.style.top = overlayH + 'px';
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight - overlayH;
      gradLeft = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradLeft.addColorStop(0, '#003');
      gradLeft.addColorStop(1, '#007');
      gradRight = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradRight.addColorStop(0, '#300');
      gradRight.addColorStop(1, '#900');
      socket.emit('canvasDimensions', { width: canvas.width, height: canvas.height });
    }
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    const joinURL = "<%= joinURL %>";
    const botBehaviorNames = <%- JSON.stringify(botBehaviors) %>;
    const musicTracks = <%- JSON.stringify(musicTracks) %>;
    const settings = <%- JSON.stringify(settings) %>;
    const music = document.getElementById('bgMusic');
    const volSlider = document.getElementById('musicVolume');
    const muteBtn = document.getElementById('muteButton');
    const muteIcon = document.getElementById('muteIcon');
    const loopBtn = document.getElementById('loopButton');
    const loopIcon = document.getElementById('loopIcon');
    let lastVolume = 0.5;
    volSlider.value = 0.5;
    music.volume = 0.5;
    const chooser = new TrackChooser(document.getElementById('musicChooser'), musicTracks, t => {
      if(t){
        music.src = '/music/' + t;
        music.play().catch(()=>{});
      }
    });
      volSlider.addEventListener('input', ()=>{
        music.volume = parseFloat(volSlider.value);
        muteIcon.classList.toggle('text-warning', music.volume === 0);
        if(music.volume > 0){
          lastVolume = music.volume;
        }
      });
      muteBtn.addEventListener('click', ()=>{
        if(music.volume > 0){
          lastVolume = music.volume;
          music.volume = 0;
          volSlider.value = 0;
        } else {
          music.volume = lastVolume;
          volSlider.value = lastVolume;
        }
        muteIcon.classList.toggle('text-warning', music.volume === 0);
      });
    let loopTrack = false;
    loopBtn.addEventListener('click', () => {
      loopTrack = !loopTrack;
      loopIcon.classList.toggle('text-warning', loopTrack);
    });
    music.addEventListener('ended', () => {
      if(loopTrack){
        music.currentTime = 0;
        music.play().catch(()=>{});
      } else {
        chooser.move(1);
      }
    });
    QRCode.toCanvas(document.getElementById('qrCode'), joinURL, (err) => {
      if (err) console.error(err);
      console.log('QR code generated for:', joinURL);
    });

    const leftList = document.getElementById('playersLeft');
    const rightList = document.getElementById('playersRight');
    const leftPopup = document.getElementById('blueTeamPopup');
    const rightPopup = document.getElementById('redTeamPopup');

    [leftList, rightList, leftPopup, rightPopup].forEach(el => {
      el.addEventListener('dragover', e => e.preventDefault());
    });

    function handleDrop(team) {
      return (e) => {
        e.preventDefault();
        const pid = e.dataTransfer.getData('playerId');
        if (pid) socket.emit('setTeam', { playerId: pid, team });
      };
    }
    [leftList, leftPopup].forEach(el => el.addEventListener('drop', handleDrop('left')));
    [rightList, rightPopup].forEach(el => el.addEventListener('drop', handleDrop('right')));

    const addLeft = document.getElementById('addBotLeft');
    const addRight = document.getElementById('addBotRight');
    addLeft.addEventListener('click', () => socket.emit('addBot', 'left'));
    addRight.addEventListener('click', () => socket.emit('addBot', 'right'));
    const modeSelect = document.getElementById('gameModeSelect');
    function updateModeRows() {
      const isTdm = modeSelect.value === 'tdm';
      const isControl = modeSelect.value === 'control';
      document.querySelector('#timeRow label').textContent = isTdm ? 'Round Time' : 'Game Time';
      document.getElementById('roundRow').style.display = isTdm ? '' : 'none';
      document.getElementById('spawnRow').style.display = isControl ? '' : 'none';
      document.getElementById('sizeRow').style.display = isControl ? '' : 'none';
    }
    modeSelect.addEventListener('change', updateModeRows);
    updateModeRows();

    document.getElementById('closeModal').addEventListener('click', () => {
      cancelCountdown();
      const mins = parseInt(document.getElementById('gameTimeMinutes').value) || 0;
      const secs = parseInt(document.getElementById('gameTimeSeconds').value) || 0;
      const minutes = mins + secs / 60;
      const mode = modeSelect.value;
      if (mode !== 'tdm') {
        socket.emit('setGameTime', minutes);
      } else {
        const rounds = document.getElementById('maxRoundsInput').value;
        socket.emit('setGameTime', minutes); // round duration
        socket.emit('setMaxRounds', rounds);
      }
      if (mode === 'control') {
        const spawnTime = parseFloat(document.getElementById('pointSpawnInput').value) || 30;
        const sizePct = document.getElementById('pointSizeSelect').value;
        socket.emit('setPointSpawnTime', spawnTime);
        socket.emit('setPointAreaSize', sizePct);
      }
      socket.emit('setGameMode', mode);
      document.getElementById('qrModal').style.display = 'none';
      document.getElementById('blueTeamPopup').style.display = 'none';
      document.getElementById('redTeamPopup').style.display = 'none';
      endGameCtrl.hide();
      document.getElementById('balanceButton').style.display = 'none';
      socket.emit('startGame');
    });

    const settingsCtrl = new SettingsPopup(
      document.getElementById('settingsPopup'),
      document.getElementById('closeSettings')
    );

    const balanceCtrl = new BalancePopup(
      document.getElementById('balancePopup')
    );
    const endGameCtrl = new EndGamePopup(
      document.getElementById('winnerPopup')
    );
    document.getElementById('balanceButton').addEventListener('click', () => {
      balanceCtrl.open();
    });
    document.getElementById('openBalanceStart').addEventListener('click', () => {
      balanceCtrl.open();
    });
    settingsCtrl.onClose = (from) => {
      if(from === 'start'){
        document.getElementById('qrModal').style.display = 'flex';
        document.getElementById('blueTeamPopup').style.display = 'block';
        document.getElementById('redTeamPopup').style.display = 'block';
      } else if(from === 'pause') {
        document.getElementById('pausePopup').style.display = 'flex';
      }
    };

    document.getElementById('openSettings').addEventListener('click', () => {
      document.getElementById('qrModal').style.display = 'none';
      document.getElementById('blueTeamPopup').style.display = 'none';
      document.getElementById('redTeamPopup').style.display = 'none';
      document.getElementById('balanceButton').style.display = 'none';
      settingsCtrl.open('start');
    });

    document.getElementById('openSettingsPause').addEventListener('click', () => {
      document.getElementById('pausePopup').style.display = 'none';
      document.getElementById('balanceButton').style.display = 'none';
      settingsCtrl.open('pause');
    });

    document.getElementById('exitButton').addEventListener('click', () => {
      window.location.href = '/';
    });

    document.getElementById('timeBarContainer').addEventListener('click', () => {
      socket.emit('pauseGame');
      document.getElementById('pausePopup').style.display = 'flex';
    });
    document.getElementById('continueButton').addEventListener('click', () => {
      socket.emit('resumeGame');
      document.getElementById('pausePopup').style.display = 'none';
    });
    function showStartScreen() {
      cancelCountdown();
      document.getElementById('qrModal').style.display = 'flex';
      const qr = document.getElementById('qrContainer');
      const rect = qr.getBoundingClientRect();
      const blue = document.getElementById('blueTeamPopup');
      const red = document.getElementById('redTeamPopup');
      blue.style.top = rect.top + 'px';
      red.style.top = rect.top + 'px';
      blue.style.display = 'block';
      red.style.display = 'block';
      document.getElementById('overlay').classList.remove('blur');
      document.getElementById('gameCanvas').classList.remove('blur');
      document.getElementById('balanceButton').style.display = 'none';
      document.getElementById('killFeed').innerHTML = '';
      document.getElementById('killMessages').innerHTML = '';
      killFeedMessages.length = 0;
      endGameCtrl.hide();
      winnerShown = true;
    }

    document.getElementById('restartButton').addEventListener('click', () => {
      if(restartPending) return;
      document.getElementById('pausePopup').style.display = 'none';
      cancelCountdown();
      endGameCtrl.show(lastGameData);
      scheduleRestart(() => {
        endGameCtrl.hide();
        showStartScreen();
      });
    });
    document.getElementById('endButton').addEventListener('click', () => {
      socket.emit('endGame');
      document.getElementById('pausePopup').style.display = 'none';
      cancelCountdown();
      endGameCtrl.show(lastGameData);
      startCountdown(5, () => {
        window.location.href = '/';
      });
    });
    document.getElementById('restartFinal').addEventListener('click', () => {
      if(restartPending) return;
      endGameCtrl.hide();
      showStartScreen();
      cancelCountdown();
      scheduleRestart();
    });

    function showKillMessage(text) {
      const container = document.getElementById('killMessages');
      const el = document.createElement('div');
      el.className = 'killMessage';
      el.textContent = text;
      container.appendChild(el);
      // limit to 5 messages
      while (container.children.length > 5) {
        container.firstElementChild.remove();
      }
      setTimeout(() => {
        el.style.opacity = '0';
        setTimeout(() => el.remove(), 2000);
      }, 2000);
    }

    const killFeedMessages = [];
    let restartPending = false;
    let restartTimeout = null;
    function addKillFeed(text) {
      killFeedMessages.push(text);
      if (killFeedMessages.length > 5) killFeedMessages.shift();
      const container = document.getElementById('killFeed');
      container.innerHTML = '';
      killFeedMessages.forEach(msg => {
        const div = document.createElement('div');
        div.className = 'killFeedItem';
        div.textContent = msg;
        container.appendChild(div);
      });
    }

    function showRoundTitle(text){
      const el = document.getElementById('roundTitle');
      el.textContent = text;
      el.style.opacity = '1';
      setTimeout(()=>{ el.style.opacity = '0'; }, 2000);
    }

    function showCountdown(num){
      const el = document.getElementById('countdown');
      el.textContent = num;
      el.style.opacity = '1';
      setTimeout(()=>{ el.style.opacity = '0'; }, 750);
    }

    let countdownTimer = null;

    function cancelCountdown(){
      if(countdownTimer){
        clearInterval(countdownTimer);
        countdownTimer = null;
      }
      const el = document.getElementById('countdown');
      if(el){
        el.style.opacity = '0';
      }
    }

    function startCountdown(seconds, cb){
      cancelCountdown();
      let count = seconds;
      showCountdown(count);
      countdownTimer = setInterval(()=>{
        count--;
        if(count>0){
          showCountdown(count);
        } else {
          clearInterval(countdownTimer);
          countdownTimer = null;
          cb();
        }
      },1000);
    }

    function scheduleRestart(after){
      if(restartPending) return;
      restartPending = true;
      restartTimeout = setTimeout(() => {
        socket.emit('restartGame');
        restartPending = false;
        if(typeof after === 'function') after();
      }, 5000);
    }

    let winnerShown = false;
    let lastGameData = null;

    socket.on('gameState', (data) => {
      lastGameData = data;
      if (data.gameStarted && winnerShown) winnerShown = false;
      const duration = data.gameDuration || 1;
      const progress = (duration - data.gameTimer) / duration;
      const segs = document.querySelectorAll('#timeSegments li');
      segs.forEach((seg,i)=>{
        const start = i / segs.length;
        const end = (i+1) / segs.length;
        seg.classList.toggle('filled', progress >= end);
        seg.classList.toggle('active', progress >= start && progress < end);
      });
      const mid = segs[Math.floor(segs.length/2)];
      const timeText = document.getElementById('timeText');
      timeText.style.color = mid.classList.contains('filled') ? '#000' : '#fff';
      timeText.innerText = data.gameTimer + 's';
      document.getElementById('blueScore').innerText = data.scoreBlue;
      document.getElementById('redScore').innerText = data.scoreRed;
      document.getElementById('pausePopup').style.display = data.gamePaused ? 'flex' : 'none';
      if (!data.gameStarted) {
        updateTeamLists(data);
      }
      if (!data.gameOver) {
        drawGame(data);
      } else {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        if (!winnerShown) {
          winnerShown = true;
          endGameCtrl.show(data);
        }
      }
    });

    socket.on('kill', ({ killer, victim }) => {
      if(showKillMsgs){
        const tpl = killTemplates[Math.floor(Math.random() * killTemplates.length)] || '{name2} killed {name1}';
        const msg = tpl.replace('{name1}', victim).replace('{name2}', killer);
        showKillMessage(msg);
        addKillFeed(msg);
      }
    });

    socket.on('damagePopup', ({ x, y, amount }) => {
      if(showDamagePopups){
        spawnFloatingText({ x, y, text: `-${Math.ceil(amount)}`, color: '#ff273d' });
      }
    });

    socket.on('regenPopup', ({ x, y, amount, type }) => {
      const color = type === 'shield' ? '#00b3ff' : '#00ff80';           // blue or green
      spawnFloatingText({ x, y, text: `+${Math.ceil(amount)}`, color });
    });

    socket.on('roundStart', ({ round }) => {
      showRoundTitle('Round ' + round);
    });

    socket.on('roundCountdown', ({ count }) => {
      showCountdown(count);
    });

    socket.on('roundEnd', ({ winner }) => {
      let text = 'Draw';
      if (winner === 'left') text = 'Blue Wins';
      else if (winner === 'right') text = 'Red Wins';
      showRoundTitle(text);
    });

    function truncateName(name){
      if(!name) return 'Unnamed';
      return name.length > 12 ? name.slice(0,12) + '\u2026' : name;
    }

    function updateTeamLists(data) {
      const sig = Object.values(data.players)
        .map(p => `${p.id}|${p.team}|${p.name}|${p.isBot}|${p.behavior}`)
        .sort()
        .join(';');
      if (sig === lastPlayerListSig) return;
      lastPlayerListSig = sig;
      const leftEl = document.getElementById('playersLeft');
      const rightEl = document.getElementById('playersRight');
      leftEl.innerHTML = '';
      rightEl.innerHTML = '';
      let leftCount = 0, rightCount = 0;
      Object.values(data.players).forEach(p => {
        const li = document.createElement('li');
        li.dataset.playerId = p.id;
        const name = document.createElement('span');
        name.className = 'playerName';
        name.textContent = p.name || 'Unnamed';
        name.draggable = true;
        name.addEventListener('dragstart', (e) => {
          e.dataTransfer.setData('playerId', p.id);
        });

        li.appendChild(name);

        if (p.isBot) {
          const sel = document.createElement('select');
          sel.className = 'form-select form-select-sm behaviorSelect';
          botBehaviorNames.forEach(b => {
            const opt = document.createElement('option');
            opt.value = b;
            opt.textContent = b;
            if (p.behavior === b) opt.selected = true;
            sel.appendChild(opt);
          });
          sel.addEventListener('change', () => {
            socket.emit('setBotBehavior', { botId: p.id, behavior: sel.value });
          });
          li.appendChild(sel);
        }

        const remove = document.createElement('span');
        remove.textContent = '❌';
        remove.className = 'removeBtn';
        remove.draggable = false;
        remove.addEventListener('click', (ev) => {
          ev.preventDefault();
          ev.stopPropagation();
          socket.emit('removePlayer', li.dataset.playerId);
          li.remove();
        });
        li.appendChild(remove);
        if (p.team === 'left') { leftEl.appendChild(li); leftCount++; }
        else { rightEl.appendChild(li); rightCount++; }
      });
      document.querySelector('#blueTeamPopup h4').textContent = `Blue Team (${leftCount})`;
      document.querySelector('#redTeamPopup h4').textContent = `Red Team (${rightCount})`;
    }

    function drawGame(data){
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = gradLeft;
      ctx.fillRect(0, 0, canvas.width / 2, canvas.height);
      ctx.fillStyle = gradRight;
      ctx.fillRect(canvas.width / 2, 0, canvas.width / 2, canvas.height);

      if (data.pointAreas) {
        for (const team in data.pointAreas) {
          const areas = data.pointAreas[team];
          if (!areas) continue;
          areas.forEach(area => {
            ctx.beginPath();
            ctx.fillStyle = team === 'left' ? 'rgba(0,0,255,0.3)' : 'rgba(255,0,0,0.3)';
            ctx.strokeStyle = '#fff';
            ctx.arc(area.x, area.y, area.radius, 0, Math.PI * 2);
            ctx.fill();
            ctx.stroke();
          });
        }
      }
      
      const frame = Math.floor(bulletFrameTick / 5) % 8;
      bulletFrameTick++;
      data.bullets.forEach(bullet => drawBullet(bullet, frame));

      for (const id in data.players) {
        drawPlayer(data.players[id], data);
      }
      drawFloatingTexts();
    }

    // Position team lists when the page loads
    showStartScreen();
  </script>
</body>
</html>
