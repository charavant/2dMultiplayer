<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Space Battle Pong ‚Äì PC Controller</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />

  <!-- FONTS & ICONS -->
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />

  <!-- THEME -->
  <style>
    :root{
      --blue-team:#00b3ff;
      --red-team :#ff273d;
      --neutral  :#ffffff;
      --bg-dark  :#0a0d13;
      --bg-mid   :#142134;
    }
    *{margin:0;padding:0;box-sizing:border-box;}
    html,body{height:100%;width:100%;overflow:hidden;font-family:'Orbitron',sans-serif;color:var(--neutral);}    
    body{background:radial-gradient(ellipse at bottom,var(--bg-mid) 0%,var(--bg-dark) 100%);}    
    body::before{content:"";position:fixed;inset:0;width:300%;height:300%;background:url("https://raw.githubusercontent.com/Kieran-Brown/assets/main/stars_2.png") repeat;animation:stars 140s linear infinite;pointer-events:none;}
    @keyframes stars{from{transform:translateY(0);}to{transform:translateY(-50%);} }

    /* ===== Canvas ===== */
    #gameCanvas{position:absolute;top:0;left:0;display:block;background:transparent;}

    /* ===== HUD ===== */
    #overlay{position:absolute;top:0;left:0;width:100%;pointer-events:none;display:flex;flex-direction:column;align-items:center;}

    #scoreRow{width:100%;display:flex;align-items:center;gap:.6rem;padding:6px 12px;}
    .scoreBox{flex:0 0 auto;font-size:1.9rem;padding:.1rem 1rem;border-radius:6px;background:var(--neutral);color:#000;border:3px solid var(--neutral);}    
    .scoreBlue{border-color:var(--blue-team);}    
    .scoreRed {border-color:var(--red-team);}    

    #timeBarContainer{flex:1;position:relative;height:22px;}
    #timeSegments{display:flex;height:100%;margin:0;padding:0;list-style:none;}
    #timeSegments li{flex:1;margin-right:2px;height:100%;box-shadow:inset 0 0 10px 1px rgba(117,182,255,0.4),0 0 20px rgba(117,182,255,0.1);}
    #timeSegments li:last-child{margin-right:0;}
    #timeSegments li.filled{background:rgba(255,255,255,0.9);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 20px rgba(117,182,214,0.5);}
    #timeSegments li.active{
      -webkit-animation: pulse 1s alternate infinite;
      -moz-animation: pulse 1s alternate infinite;
      animation: pulse 1s alternate infinite;
    }
    #timeText{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;font-size:.9rem;color:#fff;pointer-events:none;transition:color .2s;}

    @-webkit-keyframes pulse{0%{background:rgba(255,255,255,1);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 40px 2px rgba(105,135,255,1);}100%{background:rgba(255,255,255,0);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 30px 2px rgba(105,135,255,0.3);}}
    @-moz-keyframes pulse{0%{background:rgba(255,255,255,1);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 40px 2px rgba(105,135,255,1);}100%{background:rgba(255,255,255,0);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 30px 2px rgba(105,135,255,0.3);}}
    @keyframes pulse{0%{background:rgba(255,255,255,1);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 40px 2px rgba(105,135,255,1);}100%{background:rgba(255,255,255,0);box-shadow:inset 0 0 10px 2px rgba(117,182,255,0.5),0 0 30px 2px rgba(105,135,255,0.3);}}

    /* Name entry & spectator message */
    #nameEntry, #spectatorMsg{
      position:fixed;inset:0;display:none;flex-direction:column;
      align-items:center;justify-content:center;background:rgba(0,0,0,.85);
      z-index:2000;text-align:center;
    }
    #spectatorMsg{display:flex;font-size:2rem;gap:1rem;}
    #nameEntry input{margin-bottom:1rem;padding:.3rem .6rem;text-align:center;}

    /* ===== Stats Toggle ===== */
    #statsToggle{pointer-events:auto;position:absolute;bottom:10px;left:10px;padding:4px 6px;font-size:20px;background:rgba(0,0,0,.8);border:1px solid var(--neutral);color:var(--neutral);cursor:pointer;z-index:1002;}

    #playerStats{position:absolute;bottom:50px;left:10px;background:rgba(0,0,0,.8);padding:8px;font-size:16px;transition:transform .25s;}
    #playerStats.hidden{transform:translateY(110%);}    
    #playerStats table{border-collapse:collapse;}
    #playerStats th,#playerStats td{padding:2px 4px;white-space:nowrap;}

    #expBarContainer{position:relative;width:200px;height:18px;background:#444;margin-bottom:4px;border-radius:4px;}
    #expBar{position:absolute;inset:0;width:0%;background:#00ff80;border-radius:4px;}

    /* Kill messages */
    #killMessages{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);display:flex;flex-direction:column;align-items:center;gap:.4rem;pointer-events:none;z-index:1003;}
    .killMessage{padding:.4rem .8rem;background:rgba(0,0,0,.7);border-radius:6px;font-size:1.3rem;opacity:1;transition:opacity 2s linear;}

    #killFeed{position:fixed;top:60px;right:10px;width:260px;display:flex;flex-direction:column;align-items:flex-end;gap:.25rem;font-size:.9rem;opacity:.7;pointer-events:none;z-index:1002;}
    .killFeedItem{background:rgba(0,0,0,.5);padding:.25rem .5rem;border-radius:4px;}

    #roundTitle{
      position:fixed;top:40%;left:50%;transform:translate(-50%,-50%);
      font-size:3rem;color:#fff;pointer-events:none;opacity:0;
      transition:opacity .5s;z-index:1004;text-shadow:0 0 10px #000;
    }

    /* Team aura around the screen */
    #teamAura{
      position:fixed;
      inset:0;
      pointer-events:none;
      box-shadow:0 0 25px var(--neutral), inset 0 0 50px var(--neutral);
      transition:box-shadow .3s;
      z-index:1001;
    }
  </style>
</head>
<body>
  <!-- HUD -->
  <div id="overlay">
    <div id="scoreRow">
      <div id="blueScore" class="scoreBox scoreBlue">0</div>
      <div id="timeBarContainer"><ul id="timeSegments"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><span id="timeText">0s</span></div>
      <div id="redScore" class="scoreBox scoreRed">0</div>
    </div>
  </div>

  <!-- GAME CANVAS -->
  <canvas id="gameCanvas"></canvas>

  <!-- PLAYER STATS PANEL -->
  <button id="statsToggle">‚¨áÔ∏è</button>
  <div id="playerStats">
    <div id="expBarContainer"><div id="expBar"></div></div>
    <table id="statsTable">
      <tr>
        <th>üèÜ Lv</th><td id="stat-level">0</td>
        <th>‚≠ê EXP</th><td id="stat-exp">0</td>
        <th>‚ù§Ô∏è HP</th><td id="stat-lives">0</td>
        <th>‚ö° DMG</th><td id="stat-damage">0</td>
        <th>üöÄ SPD</th><td id="stat-speed">0</td>
        <th>üî´ Shots</th><td id="stat-moreBullets">0</td>
        <th>‚ÜóÔ∏è Diag</th><td id="stat-diagonal">0</td>
        <th>üõ° Shield</th><td id="stat-shield">0</td>
      </tr>
    </table>
  </div>

  <!-- FEEDS -->
  <div id="killMessages"></div>
  <div id="killFeed"></div>
  <div id="roundTitle"></div>

  <!-- Spectator + Join Elements -->
  <div id="spectatorMsg">
    <div>Spectator Mode</div>
    <button id="startJoin" class="btn btn-primary">Join Game</button>
  </div>
  <div id="nameEntry">
    <input id="playerName" class="form-control" placeholder="Commander name" maxlength="20">
    <button id="joinBtn" class="btn btn-primary"><i class="bi bi-rocket-takeoff"></i> Join</button>
  </div>

  <script src="/socket.io/socket.io.js"></script>

  <script>
  /* ========================================================
    1.  SET-UP & RESIZE
  ======================================================== */
  const socket = io();
const canvas = document.getElementById('gameCanvas');
const ctx     = canvas.getContext('2d');
const teamAura = document.getElementById('teamAura');
let currentTeam = null;

  function fitCanvas() {
    canvas.width  = window.innerWidth;
    canvas.height = window.innerHeight;
    socket.emit('canvasDimensions', { width: canvas.width, height: canvas.height });
  }
  fitCanvas();
  window.addEventListener('resize', fitCanvas);

  const spectatorMsg = document.getElementById('spectatorMsg');
  const nameEntry = document.getElementById('nameEntry');
  const startJoin = document.getElementById('startJoin');
  const joinBtn = document.getElementById('joinBtn');

  // ---- Persistence helpers ----
  const STORAGE_KEY = 'sbp_profile_pc';
  function loadProfile(){
    try { return JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}'); } catch { return {}; }
  }
  function saveProfile(p){
    const cur = loadProfile();
    localStorage.setItem(STORAGE_KEY, JSON.stringify({ ...cur, ...p }));
  }
  function ensureDeviceId(){
    const cur = loadProfile();
    if(cur.deviceId) return cur.deviceId;
    const id = 'dev-' + Math.random().toString(36).slice(2) + Date.now().toString(36);
    saveProfile({ deviceId: id });
    return id;
  }
  const DEVICE_ID = ensureDeviceId();

  startJoin.addEventListener('click', () => {
    spectatorMsg.style.display = 'none';
    nameEntry.style.display = 'flex';
  });

  joinBtn.addEventListener('click', () => {
    const name = document.getElementById('playerName').value.trim();
    if (!name) return;
    saveProfile({ name });
    socket.emit('joinWithName', { name, device: 'pc', deviceId: DEVICE_ID });
    nameEntry.style.display = 'none';
    statsToggle.style.display = 'block';
  });

  // Auto-restore on load
  window.addEventListener('load', () => {
    const prof = loadProfile();
    if (prof.name) {
      document.getElementById('playerName').value = prof.name;
      socket.emit('joinWithName', { name: prof.name, device: 'pc', deviceId: DEVICE_ID });
      nameEntry.style.display = 'none';
      statsToggle.style.display = 'block';
    }
  });

  /* ========================================================
    2.  FLOATING DAMAGE / REGEN TEXTS
  ======================================================== */
  const floatTexts = [];
  function spawnFloat({ x, y, text, color = '#fff', life = 1000 }) {
    floatTexts.push({ x, y, text, color, born: performance.now(), life });
  }
  function drawFloatTexts() {
    const now = performance.now();
    for (let i = floatTexts.length - 1; i >= 0; i--) {
      const f   = floatTexts[i];
      const age = now - f.born;
      if (age > f.life) { floatTexts.splice(i, 1); continue; }

      ctx.globalAlpha = 1 - age / f.life;
      ctx.font = '18px Orbitron, sans-serif';
      ctx.fillStyle = f.color;
      ctx.textAlign = 'center';
      ctx.fillText(f.text, f.x, f.y - age * 0.05);   // drift ‚Üë
    ctx.globalAlpha = 1;
  }

  function showRoundTitle(text){
    const el = document.getElementById('roundTitle');
    el.textContent = text;
    el.style.opacity = '1';
    setTimeout(()=>{ el.style.opacity = '0'; }, 2000);
  }
  }

  /* ========================================================
    3.  SOCKET POP-UPS
  ======================================================== */
  socket.on('damagePopup', ({ x, y, amount }) =>
    spawnFloat({ x, y, text: `-${Math.ceil(amount)}`, color: '#ff273d' })
  );
  socket.on('regenPopup',  ({ x, y, amount, type }) =>
    spawnFloat({ x, y, text: `+${Math.ceil(amount)}`, color: type === 'shield' ? '#00b3ff' : '#00ff80' })
  );
  socket.on('roundStart', ({ round }) => showRoundTitle('Round ' + round));
  socket.on('roundEnd', ({ winner }) => {
    let t = 'Draw';
    if (winner === 'left') t = 'Blue Wins';
    else if (winner === 'right') t = 'Red Wins';
    showRoundTitle(t);
  });

  // Heartbeat ack
  socket.on('heartbeatPing', () => {
    socket.emit('heartbeatAck');
  });

  // Signal active/inactive based on visibility and page lifecycle
  function sendActivity(active){
    try { socket.emit('clientActive', { active }); } catch {}
  }
  document.addEventListener('visibilitychange', () => {
    sendActivity(document.visibilityState === 'visible');
  });
  window.addEventListener('focus', () => sendActivity(true));
  window.addEventListener('blur', () => sendActivity(false));
  window.addEventListener('pagehide', () => sendActivity(false));
  window.addEventListener('beforeunload', () => sendActivity(false));

  // Auto re-join on (re)connect without page refresh
  socket.on('connect', () => {
    const profRaw = localStorage.getItem('sbp_profile_pc');
    let prof = {};
    try { prof = JSON.parse(profRaw || '{}'); } catch {}
    if (prof && prof.name) {
      socket.emit('joinWithName', { name: prof.name, device: 'pc', deviceId: DEVICE_ID });
    }
  });

  /* ========================================================
    4.  INPUT ‚Äì WASD AIM
  ======================================================== */
  const pressed = { w: false, a: false, s: false, d: false };
  ['keydown', 'keyup'].forEach(evt =>
    window.addEventListener(evt, e => {
      if (['w', 'a', 's', 'd'].includes(e.key)) pressed[e.key] = evt === 'keydown';
    })
  );
  setInterval(() => {
    const dx = (pressed.d ? 1 : 0) - (pressed.a ? 1 : 0);
    const dy = (pressed.s ? 1 : 0) - (pressed.w ? 1 : 0);
    if (dx || dy) socket.emit('updateAngle', Math.atan2(dy, dx) * 180 / Math.PI);
  }, 1000 / 30);

  function updateAura(team){
    if(!teamAura) return;
    if(team && team !== currentTeam){
      currentTeam = team;
      const color = team === 'left' ? 'var(--blue-team)' : 'var(--red-team)';
      teamAura.style.boxShadow = `0 0 25px ${color}, inset 0 0 50px ${color}`;
    }
  }

  socket.on('playerInfo', p => { updateAura(p.team); try{ const cur = loadProfile(); localStorage.setItem(STORAGE_KEY, JSON.stringify({ ...cur, lastSocketId: p.id })); }catch{} });

  /* ========================================================
    5.  SPRITES
  ======================================================== */
  const blueShip = new Image();
  blueShip.src   = "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='40' height='40'><circle cx='20' cy='20' r='18' fill='%2300b3ff' stroke='%230087cc' stroke-width='4'/></svg>";
  const redShip  = new Image();
  redShip.src    = "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='40' height='40'><circle cx='20' cy='20' r='18' fill='%23ff273d' stroke='%23c40027' stroke-width='4'/></svg>";

  const bulletSprites = { left: [], right: [] };
  for (let i = 32; i < 40; i++) {
    const idx = String(i).padStart(3, '0');
    const r = new Image();
    r.src = `/assets/Bullets/bullet${idx}.png`;
    bulletSprites.right.push(r);
    const b = new Image();
    b.src = `/assets/Bullets/tile${idx}.png`;
    bulletSprites.left.push(b);
  }
  let bulletFrameTick = 0;

  const statsToggle = document.getElementById('statsToggle');
  const playerStats  = document.getElementById('playerStats');
  statsToggle.addEventListener('click', () => {
    playerStats.classList.toggle('hidden');
  });
  statsToggle.style.display = 'none';

  /* ========================================================
    6.  DRAW HELPERS
  ======================================================== */
  function drawPlayers(players, mode) {
    for (const id in players) {
      const p = players[id];
      const spr = p.team === 'left' ? blueShip : redShip;
      const faded = mode==='tdm' && !p.isAlive;
      if (faded) ctx.globalAlpha = 0.35;
      ctx.drawImage(spr, p.x - p.radius, p.y - p.radius, p.radius * 2, p.radius * 2);
      if (faded) { ctx.globalAlpha = 1; continue; }

      /* bars */
      const bw = p.radius * 2,
            bh = 6,
            x  = p.x - bw / 2;
      const canDrawAbove = (p.y - p.radius - 34) >= 0;
      const drawBelow = !canDrawAbove;
      const y  = drawBelow ? (p.y + p.radius + 14) : (p.y - p.radius - 34);

      ctx.fillStyle = 'rgba(0,0,0,.6)';
      ctx.fillRect(x, y, bw, bh);            // rail shield
      ctx.fillRect(x, y + bh + 2, bw, bh);   // rail health

      const shieldColor = p.team === 'left'
        ? 'rgba(0,179,255,.9)'
        : 'rgba(214,45,32,.9)';
      ctx.fillStyle = shieldColor;  // shield color by team
      ctx.fillRect(x, y, bw * ((p.shield || 0) / (p.shieldMax || 1)), bh);

      ctx.fillStyle = 'rgba(255,39,61,.9)';  // health red
      ctx.fillRect(x, y + bh + 2, bw * ((p.lives || 0) / (p.maxLives || 1)), bh);

      /* name */
      ctx.font = '16px Orbitron, sans-serif';
      ctx.fillStyle = '#fff';
      ctx.textAlign = 'center';
      const nameY = drawBelow ? (y + bh * 2 + 16) : (y - 6);
      ctx.fillText(p.name || 'Anon', p.x, nameY);
    }
  }

  /* ========================================================
    7.  MAIN GAME RENDER
  ======================================================== */
  socket.on('gameState', state => {
    const joined = !!state.players[socket.id];
    spectatorMsg.style.display = joined ? 'none' : 'flex';
    statsToggle.style.display = joined ? 'block' : 'none';
    if(!joined) playerStats.classList.add('hidden');
    // clear
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // bullets
    const frame = Math.floor(bulletFrameTick / 5) % 8;
    bulletFrameTick++;
    state.bullets.forEach(b => {
      const img = bulletSprites[b.team][frame];
      if (img) ctx.drawImage(img, b.x - b.radius, b.y - b.radius, b.radius * 2, b.radius * 2);
    });

    // players & pop-ups
    drawPlayers(state.players, state.mode);
    drawFloatTexts();

    updateAura(state.players[socket.id]?.team);

    // HUD numbers
    document.getElementById('blueScore').textContent = state.scoreBlue;
    document.getElementById('redScore') .textContent = state.scoreRed;
    const pct = (state.gameDuration - state.gameTimer) / state.gameDuration;
    const segs = document.querySelectorAll('#timeSegments li');
    segs.forEach((seg,i)=>{
      const start = i / segs.length;
      const end = (i+1) / segs.length;
      seg.classList.toggle('filled', pct >= end);
      seg.classList.toggle('active', pct >= start && pct < end);
    });
    const mid = segs[Math.floor(segs.length/2)];
    const timeText = document.getElementById('timeText');
    timeText.style.color = mid.classList.contains('filled') ? '#000' : '#fff';
    timeText.textContent = state.gameTimer + 's';
  });
</script>

</body>
</html>
